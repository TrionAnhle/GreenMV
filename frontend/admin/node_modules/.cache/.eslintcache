[{"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\index.js":"1","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\reportWebVitals.js":"2","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\App.js":"3","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Home\\Home.js":"4","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Login\\Login.js":"5","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\common\\Layout\\Layout.js":"6","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\routes.js":"7","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\Sidebar\\Sidebar.js":"8","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Movies\\Movies.js":"9","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\utils\\request.js":"10","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Staffs\\Staff.js":"11","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Receipts\\Receipt.js":"12","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Sessions\\Session.js":"13","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Cinemas\\Cinema.js":"14","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Categories\\Category.js":"15","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\utils\\date.js":"16","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\utils\\number.js":"17","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\utils\\constants.js":"18","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Page404\\Page404.js":"19","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Header\\Header.js":"20","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Header\\Button.js":"21","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Slideshow\\Slideshow.js":"22","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\UserHome\\UserHome.js":"23","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\Movie\\Movie.js":"24","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\Footer\\Footer.js":"25","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\UserMovieDetail\\UserMovieDetail.js":"26","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\UserSession\\UserSession.js":"27","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\UserSessionDetail\\UserSessionDetail.js":"28","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\Seat\\Seat.js":"29","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\AccountDetail\\AccountDetail.js":"30","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\AccountDetailPage\\AccountDetailPage.js":"31","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\AccountSessionPage\\AccountSessionPage.js":"32","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Register\\Register.js":"33","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Dashboard\\Dashboard.js":"34","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Account\\Account.js":"35"},{"size":517,"mtime":1629213751356,"results":"36","hashOfConfig":"37"},{"size":375,"mtime":1629213751356,"results":"38","hashOfConfig":"37"},{"size":2564,"mtime":1630743745954,"results":"39","hashOfConfig":"37"},{"size":2145,"mtime":1629620377756,"results":"40","hashOfConfig":"37"},{"size":4598,"mtime":1630512030956,"results":"41","hashOfConfig":"37"},{"size":2075,"mtime":1630744323242,"results":"42","hashOfConfig":"37"},{"size":1643,"mtime":1630743936351,"results":"43","hashOfConfig":"37"},{"size":887,"mtime":1629437644199,"results":"44","hashOfConfig":"37"},{"size":18003,"mtime":1629561820463,"results":"45","hashOfConfig":"37"},{"size":102,"mtime":1629262007369,"results":"46","hashOfConfig":"37"},{"size":14158,"mtime":1629567824566,"results":"47","hashOfConfig":"37"},{"size":8650,"mtime":1630921217657,"results":"48","hashOfConfig":"37"},{"size":15333,"mtime":1630913541960,"results":"49","hashOfConfig":"37"},{"size":13515,"mtime":1630484924866,"results":"50","hashOfConfig":"37"},{"size":8376,"mtime":1629440404396,"results":"51","hashOfConfig":"37"},{"size":769,"mtime":1630393544787,"results":"52","hashOfConfig":"37"},{"size":166,"mtime":1629361658957,"results":"53","hashOfConfig":"37"},{"size":151,"mtime":1629973622068,"results":"54","hashOfConfig":"37"},{"size":311,"mtime":1629476336673,"results":"55","hashOfConfig":"37"},{"size":2977,"mtime":1630743134942,"results":"56","hashOfConfig":"37"},{"size":962,"mtime":1629794915051,"results":"57","hashOfConfig":"37"},{"size":2251,"mtime":1630057506655,"results":"58","hashOfConfig":"37"},{"size":1580,"mtime":1632833057239,"results":"59","hashOfConfig":"37"},{"size":563,"mtime":1630055185795,"results":"60","hashOfConfig":"37"},{"size":1587,"mtime":1630742860199,"results":"61","hashOfConfig":"37"},{"size":4651,"mtime":1630243003132,"results":"62","hashOfConfig":"37"},{"size":5582,"mtime":1630426872168,"results":"63","hashOfConfig":"37"},{"size":9893,"mtime":1630508124038,"results":"64","hashOfConfig":"37"},{"size":1146,"mtime":1630433763650,"results":"65","hashOfConfig":"37"},{"size":5802,"mtime":1630510712074,"results":"66","hashOfConfig":"37"},{"size":6736,"mtime":1630490483402,"results":"67","hashOfConfig":"37"},{"size":5888,"mtime":1630493805741,"results":"68","hashOfConfig":"37"},{"size":7371,"mtime":1630747966363,"results":"69","hashOfConfig":"37"},{"size":4478,"mtime":1630557092061,"results":"70","hashOfConfig":"37"},{"size":10376,"mtime":1630854056013,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"187u43i",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"74"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"74"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"74"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"74"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"74"},"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\index.js",[],["167","168"],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\reportWebVitals.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\App.js",["169","170","171","172","173"],"import 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport 'primeflex/primeflex.css';\r\nimport Login from './containers/Login/Login';\r\nimport Register from \"./containers/Register/Register\"\r\nimport Home from './containers/Home/Home';\r\nimport Page404 from './containers/Page404/Page404'\r\nimport { BrowserRouter as Router, Route, Switch, useHistory } from \"react-router-dom\";\r\nimport React, { useState,useEffect } from 'react';\r\nimport UserHome from './containers/User/UserHome/UserHome';\r\nimport UserMovieDetail from './containers/User/UserMovieDetail/UserMovieDetail'\r\nimport UserSession from './containers/User/UserSession/UserSession';\r\nimport UserSessionDetail from './containers/User/UserSessionDetail/UserSessionDetail';\r\nimport AccountDetail from './containers/User/AccountDetail/AccountDetail';\r\n\r\nfunction App() {\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  const [isChose, setIsChose] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if(token === null){\r\n      setIsLogin(false);\r\n    }else{\r\n      setIsLogin(true);\r\n    }\r\n  }, [localStorage.getItem('token')]);\r\n\r\n   \r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        {/* Route Public */}\r\n        <Route exact path={'/'}><UserHome/> </Route>\r\n        <Route exact path={'/movie/detail/:id'}><UserMovieDetail /> </Route>\r\n        <Route exact path={'/movie/session'}><UserSession /> </Route>\r\n        <Route exact path={'/movie/session/:id'}><UserSessionDetail /> </Route>\r\n        <Route exact path={'/user/account/info'}><AccountDetail  status={0}/> </Route>\r\n        <Route exact path={'/user/account/receipt'}><AccountDetail status={1} /> </Route>\r\n        <Route exact path={'/page404'}><Page404 /></Route>\r\n        {/* Router Admin */}\r\n        <Route exact path={'/login'}><Login/></Route>\r\n        <Route exact path={'/register'}><Register/></Route>\r\n        <Route exact path={'/admin'}><Home active={1}/></Route>\r\n        <Route exact path={'/staff'}><Home active={2}/></Route>\r\n        <Route exact path={'/receipt'}><Home active={3}/></Route>\r\n        <Route exact path={'/movie'}><Home active={4}/></Route>\r\n        <Route exact path={'/session'}><Home active={5}/></Route>\r\n        <Route exact path={'/cateogry'}><Home active={6}/></Route>\r\n        <Route exact path={'/cinema'}><Home active={7}/></Route>\r\n        <Route exact path={'/account'}><Home active={8}/></Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Home\\Home.js",["174"],"import React, { useEffect, useState } from 'react';\r\nimport Layout from \"../../components/common/Layout/Layout\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport { navMenu } from \"../../routes\";\r\nimport API from '../utils/request'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst getRoutes = () => {\r\n    return navMenu.map(({ id, route, Comp, role }) => (\r\n        role.includes(localStorage.getItem('role')) &&\r\n        <Route key={id} exact path={route}>\r\n            <Comp />\r\n        </Route>\r\n    ))\r\n}\r\n\r\nconst Home = (props) => {\r\n\r\n    const [active, setActive] = useState('');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        setActive(props.active);\r\n    }, [props.active]);\r\n\r\n    useEffect(() => {\r\n        if(localStorage.getItem('token') === '' || localStorage.getItem('role') === 'ROLE_USER'){\r\n            history.push(\"/login\");\r\n        }\r\n        else{\r\n            API.get('/api/admin/category', \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }}).catch((error)=>{\r\n                if(!error.response){\r\n                    history.push(\"/page404\");\r\n                }\r\n                else{\r\n                    if(error.response.status === 401){\r\n                        history.push(\"/login\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Router>\r\n            <Layout>\r\n                {navMenu.map(({ id, route, name, subMenu, role }) => (\r\n                    role.includes(localStorage.getItem('role')) &&\r\n                    <Layout.Sidebar\r\n                        key={id}\r\n                        route={route}\r\n                        title={name}\r\n                        subMenu={subMenu}\r\n                        to={route}\r\n                        active={id === active}\r\n                        onActive={() => setActive(id)} />\r\n                ))}\r\n                <Switch>{getRoutes()}</Switch>\r\n            </Layout>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Login\\Login.js",["175","176","177"],"import React, { useState,useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { useFormik } from 'formik';\r\nimport './Login.css';\r\nimport { Toast } from 'primereact/toast';\r\nimport axios from 'axios';\r\nimport { Redirect } from 'react-router';\r\nimport API from '../utils/request'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () =>{\r\n    const [formData, setFormData] = useState({});\r\n    const toast = useRef(null);\r\n    const history = useHistory();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: '',\r\n            password: '',\r\n        },\r\n        validate: (data) => {\r\n            let errors = {};\r\n\r\n            if (!data.username) {\r\n                errors.username = 'Username không được để trống.';\r\n            }\r\n\r\n            if (!data.password) {\r\n                errors.password = 'Password không được để trống';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            setFormData(data);\r\n            formik.resetForm();\r\n            API.post('/api/auth/signin', data).then((res) => {\r\n                localStorage.setItem('username',res.data.username);\r\n                localStorage.setItem('id',res.data.id);\r\n                localStorage.setItem('token',res.data.token);\r\n                localStorage.setItem('role',res.data.roles[0]);\r\n                if(res.data.roles[0] ==='ROLE_ADMIN' || res.data.roles[0] === 'ROLE_STAFF'){\r\n                    history.push(\"/admin\");\r\n                }else{\r\n                    history.push(\"/\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error.response.status === 401){\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Username hoặc Password không đúng', life: 3000});\r\n                }else if(error.response.status === 400){\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Tài khoản bị khoá', life: 3000});\r\n                }else{\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống đăng nhập lại', life: 3000});\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    const isFormFieldValid = (name) => !!(formik.touched[name] && formik.errors[name]);\r\n    const getFormErrorMessage = (name) => {\r\n        return isFormFieldValid(name) && <small className=\"p-error\">{formik.errors[name]}</small>;\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Toast ref={toast} />\r\n        <div className=\"form\" style={{backgroundColor:\"black\"}}>\r\n            <div className=\"p-d-flex p-jc-center\">\r\n                <div className=\"card\">\r\n                    <h2 className=\"p-text-center\" style={{color:'white'}}>Đăng nhập</h2>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\" style={{backgroundColor:'black'}}>\r\n                        <div className=\"p-field\">\r\n                            <span className=\"p-float-label\">\r\n                                <InputText id=\"username\" name=\"username\" value={formik.values.username} onChange={formik.handleChange} autoFocus />\r\n                                <label htmlFor=\"username\" className={classNames({ 'p-error': isFormFieldValid('username') })}>Username</label>\r\n                            </span>\r\n                            {getFormErrorMessage('username')}\r\n                        </div>\r\n                        <div className=\"p-field\">\r\n                            <span className=\"p-float-label\">\r\n                                <InputText type=\"password\" id=\"password\" name=\"password\" value={formik.values.password} onChange={formik.handleChange} autoFocus />\r\n                                <label htmlFor=\"password\" className={classNames({ 'p-error': isFormFieldValid('password') })}>Password</label>\r\n                            </span>\r\n                            {getFormErrorMessage('password')}\r\n                        </div>\r\n                        <Button type=\"submit\" label=\"Đăng nhập\" className=\"p-mt-2\" />\r\n                        <div className=\"p-grid p-mt-3\" style={{justifyContent:'center'}}>\r\n                            <a href=\"/register\" style={{color:'white'}}>Chưa có tài khoản, Đăng ký</a>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\common\\Layout\\Layout.js",["178","179"],"import React from \"react\";\r\nimport Sidebar from \"../../Sidebar/Sidebar\";\r\nimport \"./Layout.css\";\r\nimport logo from '../../../assets/icon-web.jpg';\r\nimport { Avatar } from 'primereact/avatar';\r\nimport { Button } from 'primereact/button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Link } from 'react-router-dom';\r\nfunction Layout(props) {\r\n    const leftChildren = [];\r\n    const rightChildren = [];\r\n    const history = useHistory();\r\n\r\n    React.Children.forEach(props.children, (child) => {\r\n        if (child?.type === Sidebar) {\r\n            leftChildren.push(child);\r\n        } else {\r\n            rightChildren.push(child);\r\n        }\r\n    });\r\n\r\n    const signout = () => {\r\n        localStorage.clear();\r\n        window.location.href = \"/login\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"layout\">\r\n            <div className=\"layout-sidebar\" style={{backgroundColor:'MenuText', color: 'white'}}>\r\n                <div className=\"flex-top\">\r\n                    <div className=\"sidebar-head\">\r\n                        <img src={logo} style={{ width: 200, height: 50 }} />\r\n                    </div>\r\n                    <div className=\"sidebar-list\"> {leftChildren}</div>\r\n                </div>\r\n                <div className=\"sidebar-bottom\">\r\n                    \r\n                    <span className=\"sidebar-name\">\r\n                        <Link to='/account' style={{color:'white', textDecoration: 'none'}}>\r\n                        <Avatar label=\"P\" shape=\"circle\" className='p-mr-1'/>\r\n                            {localStorage.getItem('username')}\r\n                        </Link>\r\n                    </span>\r\n                </div>\r\n                <div className=\"sidebar-bottom p-mt-2\" >\r\n                    <Button label=\"Đăng xuất\" icon=\"pi pi-sign-in\" className=\"p-button-danger\" style={{width:'100%'}} onClick={() => signout()}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"layout-content\">{rightChildren}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nLayout.Sidebar = Sidebar;\r\n\r\nexport default Layout;\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\routes.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\Sidebar\\Sidebar.js",["180"],"import React, { useState } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './Sidebar.css';\r\n\r\nfunction Sidebar({ title, active, subMenu, route, onActive }) {\r\n    const history = useHistory();\r\n    const [toggle, setToggle] = useState(false);\r\n\r\n    return (\r\n        <div className=\"sidebar-wrapper\">\r\n            <div onClick={() => { \r\n                if (subMenu) { setToggle(!toggle); } \r\n                else history.push(route); \r\n                onActive() }} \r\n                className={classNames('sidebar-item', { ['item-active']: active })}>{title}</div>\r\n            {toggle && subMenu && subMenu.map(({ id, title: _title, route: r }) => (\r\n                <div onClick={() => history.push(r)} className=\"sub-menu\" key={id}>{_title}</div>\r\n            ))}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Movies\\Movies.js",["181","182"],"import { Panel } from 'primereact/panel';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request'\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { toDateTimeString } from \"../utils/date\";\r\nimport { numberFormat } from \"../utils/number\";\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { useFormik } from 'formik';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { APPCONFIG } from '../utils/constants';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport './Movie.css'; \r\nimport {Checkbox} from 'primereact/checkbox';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\n\r\nfunction Movies() {\r\n    const toast = useRef(null);\r\n    const [data, setData] = useState({});\r\n    const [listCategories, setListCategories] = useState([]);\r\n    const [selectedList, setSelectedList] = useState({});\r\n    const [displayModal, setDisplayModal] = useState(false);\r\n    const [isInsert, setIsInsert] = useState(true);\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        reloadData();\r\n        getAllCateogries();\r\n    }, [])\r\n\r\n    const setSelectedRowCustomize = (e) => {\r\n        setSelectedList(e.value);\r\n    };\r\n    const getAllCateogries = () =>{\r\n        API.get('/api/admin/category', \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setListCategories(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n    }\r\n    const wait= (ms) => {\r\n        return new Promise( (resolve) => {setTimeout(resolve, ms)});\r\n    }\r\n\r\n    const reloadData = async () =>{\r\n        API.get('/api/admin/movie', \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then( await  wait(1000))\r\n            .then((res) =>{\r\n                setData(res.data.data);\r\n                console.log(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n        setSelectedList({});\r\n    }\r\n    \r\n    const deleteItem = () => {\r\n        API.post('/api/admin/movie/delete', [selectedList.id], \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                if(res.data.ok){\r\n                    toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }else{\r\n                    toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }\r\n                reloadData();\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n                toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n        });\r\n    }\r\n    const rejectFunc = () =>{\r\n\r\n    }\r\n\r\n    const confirm = () => {\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần xoá.', life: 3000});\r\n        }else\r\n            confirmDialog({\r\n                message: 'Bạn có muốn xoá - Phim: '+selectedList.name+' ? ',\r\n                header: 'Thông báo',\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => deleteItem(),\r\n                reject: () => rejectFunc()\r\n            });\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: '',\r\n            name: '',\r\n            description: '',\r\n            pathVideo: '',\r\n            screenTime: 0,\r\n            isShowing: true,\r\n            categoryId: '',\r\n            pathThumbnail : '',\r\n            base64: ''\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if (!data.name) {\r\n                errors.name = 'Tên phim không được để trống.';\r\n            }\r\n            if(isInsert && !data.base64){\r\n                errors.pathThumbnail = 'Ảnh chưa được upload.';\r\n            }\r\n            if (!data.categoryId) {\r\n                errors.categoryId = 'Loại phim không được thiếu.';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            console.log(data);\r\n            data.isShowing = checked;\r\n            API.post('/api/admin/movie', data, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    if(res.data.ok){\r\n                        toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                        reloadData();\r\n                        setDisplayModal(false);\r\n                    }else{\r\n                        toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }\r\n                    \r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error);\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n    });\r\n\r\n    const footer = (\r\n        <div>\r\n            <Button label={isInsert ? 'Thêm': 'Cập nhật'} icon=\"pi pi-check\" onClick={formik.handleSubmit}/>\r\n            <Button label=\"Huỷ\" icon=\"pi pi-times\" onClick={() =>setDisplayModal(false)}/>\r\n        </div>\r\n    );\r\n\r\n    const create = () =>{\r\n        setDisplayModal(true);\r\n        setIsInsert(true);\r\n        formik.setFieldValue('id' , '');\r\n        formik.setFieldValue('name' , '');\r\n        formik.setFieldValue('description' , '');\r\n        formik.setFieldValue('pathVideo' , '');\r\n        formik.setFieldValue('screenTime' , 1);\r\n        setChecked(false);\r\n        formik.setFieldValue('categoryId' , '');\r\n\r\n        formik.setFieldValue('pathThumbnail' , '');\r\n        formik.setFieldValue('base64' , '');\r\n        \r\n    };\r\n\r\n    const update = () =>{\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần cập nhật.', life: 3000});\r\n        }else{\r\n            setDisplayModal(true);\r\n            setIsInsert(false);\r\n            formik.resetForm();\r\n\r\n            API.get('/api/admin/movie/'+selectedList.id, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    console.log(res.data.data);\r\n                    formik.setFieldValue('id' , res.data.data[0].id);\r\n                    formik.setFieldValue('name' , res.data.data[0].name);\r\n                    formik.setFieldValue('description' , res.data.data[0].description);\r\n                    formik.setFieldValue('pathVideo' , res.data.data[0].pathVideo);\r\n                    formik.setFieldValue('screenTime' , res.data.data[0].screenTime);\r\n                    setChecked(res.data.data[0].isShowing);\r\n                    formik.setFieldValue('categoryId' , res.data.data[0].category[0].id);\r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error);\r\n            });\r\n\r\n            formik.setFieldValue('pathThumbnail' , '');\r\n            formik.setFieldValue('base64' , '');\r\n        }\r\n    };\r\n    const convertBase64 = (file) => {\r\n        return new Promise((resolve, reject) => {\r\n          const fileReader = new FileReader();\r\n          fileReader.readAsDataURL(file);\r\n    \r\n          fileReader.onload = () => {\r\n            resolve(fileReader.result);\r\n          };\r\n    \r\n          fileReader.onerror = (error) => {\r\n            reject(error);\r\n          };\r\n        });\r\n      };\r\n    \r\n\r\n    const onUpload = async (e) =>{\r\n        \r\n\r\n        const file = e.files[0];\r\n        const base64 = await convertBase64(file);\r\n        toast.current.show({severity:'success', summary: 'Thông báo', detail: 'Upload ảnh thành công', life: 3000});\r\n\r\n        formik.setFieldValue('pathThumbnail' , e.files[0].name);\r\n        formik.setFieldValue('base64' , base64);\r\n    }\r\n    \r\n    \r\n\r\n    const imageBodyTemplate = (rowData) => {\r\n        return <img src={`${APPCONFIG.BASE_URL_IMAGE}${rowData.pathThumbnail}`} \r\n                onError={(e) => e.target.src='https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'} \r\n                alt={rowData.pathThumbnail} style={{width: '100px', boxShadow: '0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)'}} />;\r\n    }\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return ( rowData.isShowing ?\r\n            <Button label=\"Đang công chiếu\" className=\"p-button-warning\" /> : \r\n            <Button label=\"Không chiếu\" className=\"p-button-info\" />);\r\n    }\r\n\r\n    return (\r\n        <Panel header=\"Danh sách các phim\">\r\n            <Toast ref={toast} />\r\n            <div className=\"p-grid\">\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Thêm\" icon=\"pi pi-plus\" className=\"p-button-success\" onClick={create}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Sửa\" icon=\"pi pi-pencil\" className=\"p-button-info\" onClick={update}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Xoá\" icon=\"pi pi-times\" className=\"p-button-danger\" onClick={confirm}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"p-grid\">\r\n                <Dialog header={isInsert ? 'Thêm mới' : 'Cập nhật'} maximizable onHide={() => setDisplayModal(false)} visible={displayModal} footer={footer}  breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\">\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-field p-mt-4 p-col-6 \">\r\n                                { !isInsert ?(\r\n                                    <div className=\"p-grid p-mb-5\" >\r\n                                        <img src={`${APPCONFIG.BASE_URL_IMAGE}${selectedList.pathThumbnail}`}  className=\"p-mt-3 p-mb-3 center-image\"\r\n                                            alt={selectedList.pathThumbnail} style={{width: '200px', height: 'auto', \r\n                                                                                boxShadow: '0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)'}} />\r\n                                    </div>\r\n                                ): \"\"}\r\n                                <div className=\"p-grid p-mr-1 p-ml-1\">\r\n                                    <small className=\"p-error p-d-block\">{formik.touched.pathThumbnail? formik.errors.pathThumbnail: ''}</small>\r\n                                    <FileUpload name=\"demo\" url=\"https://primefaces.org/primereact/showcase/upload.php\" \r\n                                        uploadOptions={false}  style={{width: '100%'}}\r\n                                        onUpload={onUpload}  accept=\"image/*\" maxFileSize={1000000}\r\n                                        emptyTemplate={<p className=\"p-m-0\">Kéo thả ảnh vào đây để upload</p>} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-field p-mt-4 p-col-6\">\r\n                                <div className=\"p-grid\">\r\n                                    <div className='p-col-12'>\r\n                                        <label htmlFor=\"name\" class=\"p-mb-2\">Tên phim</label>\r\n                                        <InputText id=\"name\" name=\"name\" value={formik.values.name} onChange={formik.handleChange} autoFocus />\r\n                                        <small className=\"p-error p-d-block\">{formik.touched.name? formik.errors.name: ''}</small>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"p-grid p-mt-3\">\r\n                                    <div className='p-col-12'>\r\n                                        <label htmlFor=\"pathVideo\" class=\"p-mb-2\">Link video youtube</label>\r\n                                        <InputText id=\"pathVideo\" value={formik.values.pathVideo} onChange={formik.handleChange} autoFocus />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"p-grid p-mt-3\">\r\n                                    <div className='p-col-12'>\r\n                                        <label htmlFor=\"categoryId\" class=\"p-mb-2\">Thể loại</label>\r\n                                        <Dropdown\r\n                                            id=\"categoryId\"\r\n                                            name=\"categoryId\"\r\n                                            placeholder={'Chọn loại phim'}\r\n                                            options={listCategories}\r\n                                            optionLabel=\"name\"\r\n                                            optionValue=\"id\"\r\n                                            {...formik.getFieldProps('categoryId')}\r\n                                            onChange={(e) => {\r\n                                                formik.handleChange(e);\r\n                                            }}\r\n                                            className=\"p-inputtext-sm\"\r\n                                        />\r\n                                        \r\n                                        <small className=\"p-error p-d-block\">{formik.touched.categoryId? formik.errors.categoryId: ''}</small>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"p-grid p-mt-3\">\r\n                                    <div className='p-col-6'>\r\n                                        <label htmlFor=\"screenTime\" class=\"p-mb-2\">Thời lượng phim(phút)</label>\r\n                                        <InputNumber id=\"screenTime\" name=\"screenTime\" value={formik.values.screenTime} \r\n                                        onValueChange={formik.handleChange} mode=\"decimal\" autoFocus showButtons min={1}/>\r\n                                    </div>\r\n                                    <div className='p-col-6 p-mt-5'>\r\n                                        <Checkbox  id=\"isShowing\" onChange={e => setChecked(e.checked)} checked={checked}></Checkbox>\r\n                                        <label htmlFor=\"isShowing\" className=\"p-checkbox-label\"> Đang công chiếu</label>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"p-grid p-mt-3\">\r\n                                    <div className=\"p-col-12\">\r\n                                        <label htmlFor=\"description\" className=\"p-checkbox-label\">Mô tả</label>\r\n                                        <InputTextarea value={formik.values.description}\r\n                                        id=\"description\" \r\n                                        onChange={formik.handleChange}\r\n                                        rows={5} cols={30} autoResize />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </Dialog>\r\n            </div>\r\n            <div className=\"datatable-templating-demo\">\r\n                <div className=\"card\">\r\n                    <DataTable value={data} paginator rows={3} scrollable scrollHeight=\"500px\"\r\n                        selection={selectedList} \r\n                        onSelectionChange={setSelectedRowCustomize} \r\n                        selectionMode=\"single\" \r\n                        dataKey=\"id\"\r\n                        stateStorage=\"local\" \r\n                        stateKey=\"dt-state-demo-local\"\r\n                        emptyMessage=\"Không có phim nào nào\">\r\n                        <Column header=\"Ảnh\" body={imageBodyTemplate}></Column>    \r\n                        <Column field=\"name\" header=\"Tên phim\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"screenTime\" header=\"Thời lượng\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"isShowing\" header=\"Trạng thái\" sortable body={statusBodyTemplate}></Column>\r\n                       \r\n                        <Column field=\"createdDate\" header=\"Ngày tạo\" body={(rowData) => toDateTimeString(rowData.createdDate)} sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"createdBy\" header=\"Người tạo\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"updateDate\" header=\"Ngày cập nhật\" body={(rowData) => toDateTimeString(rowData.updateDate)} sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"updateBy\" header=\"Người cập nhật\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default Movies\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\utils\\request.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Staffs\\Staff.js",["183","184","185","186","187"],"import { Panel } from 'primereact/panel';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request'\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { toDateTimeString } from \"../utils/date\";\r\nimport { numberFormat } from \"../utils/number\";\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { useFormik } from 'formik';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport {Password} from 'primereact/password';\r\n\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { APPCONFIG } from '../utils/constants';\r\nimport { FileUpload } from 'primereact/fileupload'; \r\nimport {Checkbox} from 'primereact/checkbox';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\n\r\nfunction Staff() {\r\n    const toast = useRef(null);\r\n    const [data, setData] = useState({});\r\n    const [selectedList, setSelectedList] = useState({});\r\n    const [displayModal, setDisplayModal] = useState(false);\r\n    const [isInsert, setIsInsert] = useState(true);\r\n    const [showDetail, setShowDetail] = useState([]);\r\n    const [sex, setSex] = useState(true);\r\n    const initDetail = [\r\n        <Column field=\"createdDate\" header=\"Ngày tạo\" body={(rowData) => toDateTimeString(rowData.createdDate)} sortable filter filterPlaceholder=\"Search by name\"></Column>,\r\n        <Column field=\"createdBy\" header=\"Người tạo\" sortable filter filterPlaceholder=\"Search by name\"></Column>,\r\n        <Column field=\"updateDate\" header=\"Ngày cập nhật\" body={(rowData) => toDateTimeString(rowData.updateDate)} sortable filter filterPlaceholder=\"Search by name\"></Column>,\r\n        <Column field=\"updateBy\" header=\"Người cập nhật\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n    ]\r\n\r\n    useEffect(() => {\r\n        reloadData();\r\n    }, [])\r\n\r\n    const setSelectedRowCustomize = (e) => {\r\n        setSelectedList(e.value);\r\n    };\r\n   \r\n\r\n    const reloadData =  () =>{\r\n        API.get('/api/admin/staff', \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setData(res.data.data);\r\n                console.log(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n        setSelectedList({});\r\n    }\r\n    \r\n    const deleteItem = () => {\r\n        API.post('/api/admin/staff/delete', [selectedList.id], \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                if(res.data.ok){\r\n                    toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }else{\r\n                    toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }\r\n                reloadData();\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n                toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n        });\r\n    }\r\n    const rejectFunc = () =>{\r\n\r\n    }\r\n\r\n    const confirm = () => {\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần xoá.', life: 3000});\r\n        }else\r\n            confirmDialog({\r\n                message: 'Bạn có muốn '+(selectedList.isDelete ? 'mở' : 'khoá')+' - tài khoản: '+selectedList.username+' ? ',\r\n                header: 'Thông báo',\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => deleteItem(),\r\n                reject: () => rejectFunc()\r\n            });\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: '',\r\n            username : '',\r\n            password : '',\r\n            fullName : '',\r\n            name : '',\r\n            sex : '',\r\n            phone : '',\r\n            address : ''\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if(!data.username.trim()){\r\n                errors.username = 'Username không được để trống';\r\n            }\r\n            if(isInsert){\r\n                if(!data.password.trim()){\r\n                    errors.password = 'Password không được để trống';\r\n                }\r\n            }\r\n            if(!data.fullName.trim()){\r\n                errors.fullName = 'Họ tên không được để trống';\r\n            }\r\n            if(!data.phone.trim()){\r\n                errors.phone = 'Số điện thoại không được để trống';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            console.log(data);\r\n            let API_URL = (isInsert ? '/api/auth/signup/staff' : '/api/admin/staff');\r\n            data.sex = sex;\r\n            API.post(API_URL, data, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    if(res.data.ok){\r\n                        toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                        reloadData();\r\n                        setDisplayModal(false);\r\n                    }else{\r\n                        toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }\r\n                    \r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error);\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n    });\r\n\r\n    const footer = (\r\n        <div>\r\n            <Button label={isInsert ? 'Thêm': 'Cập nhật'} icon=\"pi pi-check\" onClick={formik.handleSubmit}/>\r\n            <Button label=\"Huỷ\" icon=\"pi pi-times\" onClick={() =>setDisplayModal(false)}/>\r\n        </div>\r\n    );\r\n\r\n    const create = () =>{\r\n        setDisplayModal(true);\r\n        setIsInsert(true);\r\n        formik.resetForm();\r\n        \r\n    };\r\n\r\n    const update = () =>{\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần cập nhật.', life: 3000});\r\n        }else{\r\n            setDisplayModal(true);\r\n            setIsInsert(false);\r\n            \r\n            \r\n            formik.setFieldValue('id' , selectedList.id);\r\n            formik.setFieldValue('username' , selectedList.username);\r\n            formik.setFieldValue('email ' , selectedList.email);\r\n            formik.setFieldValue('fullName' , selectedList.fullName);\r\n            setSex(selectedList.sex);\r\n            formik.setFieldValue('phone' , selectedList.phone);\r\n            formik.setFieldValue('address' , selectedList.address);\r\n        }\r\n    };\r\n\r\n    \r\n    const addDetailColum = () =>{\r\n        if(showDetail.length > 0) setShowDetail([]);\r\n        else setShowDetail(initDetail);\r\n    }\r\n    \r\n    \r\n    \r\n\r\n    const sexBodyTemplate = (rowData) => {\r\n        return (rowData.sex ? 'NAM' : 'NỮ');\r\n    }\r\n    \r\n    const statusBodyTemplate = (rowData) => {\r\n        return ( rowData.isDelete ?\r\n            <Button label=\"KHOÁ\" className=\"p-button-danger\" /> : \r\n            <Button label=\"HOẠT ĐỘNG\" className=\"p-button-success\" />);\r\n    }\r\n    \r\n    return (\r\n        <Panel header=\"Danh sách các phim\">\r\n            <Toast ref={toast} />\r\n            <div className=\"p-grid\">\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Thêm\" icon=\"pi pi-plus\" className=\"p-button-success\" onClick={create}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Sửa\" icon=\"pi pi-pencil\" className=\"p-button-info\" onClick={update}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Mở/Khoá tài khoản\" icon=\"pi pi-unlock\" className=\"p-button-danger\" onClick={confirm}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Xem chi tiết\" icon=\"pi pi-book\" className=\"p-button-help\" onClick={()=> addDetailColum()}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"p-grid\">\r\n                <Dialog header={isInsert ? 'Thêm mới' : 'Cập nhật'} maximizable onHide={() => setDisplayModal(false)} visible={displayModal} footer={footer}  breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\">\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-col-6\">\r\n                                <label htmlFor=\"username\" class=\"p-mb-2\">Username</label>\r\n                                <InputText id=\"username\" value={formik.values.username} onChange={formik.handleChange} autoFocus disabled={!isInsert}/>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.username? formik.errors.username: ''}</small>\r\n                            </div>\r\n                            <div className=\"p-col-6\">\r\n                                <label htmlFor=\"password\" class=\"p-mb-2\">Password</label>\r\n                                <Password id=\"password\" name=\"password\" value={formik.values.password} onChange={formik.handleChange} toggleMask disabled={!isInsert}/>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.password? formik.errors.password: ''}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-col-6\">\r\n                                <label htmlFor=\"fullName\" class=\"p-mb-2\">Họ tên</label>\r\n                                <InputText id=\"fullName\" value={formik.values.fullName} onChange={formik.handleChange} autoFocus />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.fullName? formik.errors.fullName: ''}</small>\r\n                            </div>\r\n                            <div className=\"p-col-6\">\r\n                                <label htmlFor=\"phone\" class=\"p-mb-2\">Số điện thoại</label>\r\n                                <InputText id=\"phone\" value={formik.values.phone} onChange={formik.handleChange} keyfilter=\"num\" autoFocus maxLength={10} minLength={6}/>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.phone? formik.errors.phone: ''}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-col-6\">\r\n                                <div className=\"p-grid p-mt-3\">\r\n                                <div className=\"p-col-6\">\r\n                                    <Checkbox  id=\"sex\" onChange={() => setSex(true)} checked={sex}></Checkbox>\r\n                                    <label htmlFor=\"sex\" className=\"p-checkbox-label\">Nam</label>\r\n                                </div>\r\n                                <div className=\"p-col-6\">\r\n                                    <Checkbox  id=\"sex\" onChange={() => setSex(false)} checked={!sex}></Checkbox>\r\n                                    <label htmlFor=\"sex\" className=\"p-checkbox-label\">Nữ</label>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-col-6\">\r\n                                \r\n                                    <label htmlFor=\"address\" class=\"p-mb-2\">Địa chỉ</label>\r\n                                    <InputTextarea value={formik.values.address}\r\n                                    id=\"address\" \r\n                                    onChange={formik.handleChange}\r\n                                    rows={2} cols={30} autoResize />\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </Dialog>\r\n            </div>\r\n            <div className=\"datatable-templating-demo\">\r\n                <div className=\"card\">\r\n                    <DataTable value={data} paginator rows={10} scrollable scrollHeight=\"500px\"\r\n                        selection={selectedList} \r\n                        onSelectionChange={setSelectedRowCustomize} \r\n                        selectionMode=\"single\" \r\n                        dataKey=\"id\"\r\n                        stateStorage=\"local\" \r\n                        stateKey=\"dt-state-demo-local\"\r\n                        emptyMessage=\"Không có nhân viên nào\">  \r\n                        <Column field=\"fullName\" header=\"Họ tên\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"sex\"  body={(rowData) => sexBodyTemplate(rowData)} header=\"Giới tính\" sortable filter filterPlaceholder=\"Search by name\"></Column> \r\n                        <Column field=\"phone\" header=\"Số điện thoại\" sortable filter></Column>\r\n                        <Column field=\"username\" header=\"Tài khoản\" sortable filter></Column>\r\n                        <Column field=\"role\" header=\"Vai trò\" sortable filter></Column>\r\n                        <Column field=\"isDelete\" header=\"Trạng thái\" sortable body={statusBodyTemplate}></Column>\r\n                       \r\n                        {showDetail}\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default Staff;\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Receipts\\Receipt.js",["188","189"],"import { Panel } from 'primereact/panel';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request'\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { toDateTimeString } from \"../utils/date\";\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport QrReader from 'react-qr-reader'\r\n\r\nexport default function Receipt() {\r\n    const [result, setResult] = useState('Not Found');\r\n    \r\n    const toast = useRef(null);\r\n    const [data, setData] = useState({});\r\n    const [tickets,setTickets] = useState([]);\r\n    const [selectedList, setSelectedList] = useState({});\r\n    const [displayModal, setDisplayModal] = useState(false);\r\n\r\n \r\n   \r\n\r\n    useEffect(() => {\r\n        reloadData();\r\n    }, [])\r\n\r\n\r\n    const setSelectedRowCustomize = (e) => {\r\n        setSelectedList(e.value);\r\n    };\r\n\r\n    const reloadData =  () =>{\r\n        API.get('/api/admin/receipt', \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setData(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n        setSelectedList({});\r\n    }\r\n    \r\n    \r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return ( rowData.isGetTicket == 0 ?\r\n            <Button label=\"CHƯA LẤY\" className=\"p-button-warning\" /> : \r\n            <Button label=\"ĐÃ LẤY\" className=\"p-button-success\" />);\r\n    }\r\n\r\n    const statusPaymentType = (rowData) => {\r\n        return (rowData.paymentType == 0 ? 'Tiền mặt' : 'Qua Thẻ');\r\n    }\r\n\r\n    const handleScan = data => {\r\n        if (data) {\r\n          setResult(data);\r\n        }\r\n      }\r\n    const handleError = err => {\r\n        console.error(err)\r\n    }\r\n\r\n    const getListTicket = async () =>{\r\n        API.get('/api/admin/receipt/'+result, \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setTickets(res.data.data[0]);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n    }\r\n\r\n    const showListTicket = () =>{\r\n\r\n        console.log(tickets);\r\n        if(JSON.stringify(tickets) === '{}' || !tickets.tickets)\r\n            return <h2 style={{textAlign:'center'}}>Chưa có dữ liệu</h2>\r\n            console.log(tickets.tickets);\r\n\r\n        let elmItem = tickets.tickets.map((ele, key)=>{\r\n            return(\r\n                <div className='p-grid' >\r\n                    <div className='p-col-2'>{ele.seatId}</div>\r\n                    <div className='p-col-3'>{ele.movie}</div>\r\n                    <div className='p-col-2'>{ele.cinema}</div>\r\n                    <div className='p-col-5'>{toDateTimeString(ele.showTime)}</div>\r\n                </div>)\r\n            \r\n        });\r\n        \r\n        const getTickets = () =>{\r\n            setTickets({\r\n                ...tickets,\r\n                isGetTicket : true\r\n            });\r\n            API.post('/api/admin/receipt/status', { id  : result}, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    if(res.data.ok){\r\n                        toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                        reloadData();\r\n                        setDisplayModal(false);\r\n                    }else{\r\n                        toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }\r\n                    \r\n                })\r\n                .catch((error)=>{\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n\r\n        return ( \r\n            <div className='p-gird'>\r\n                <div className='p-grid'>{tickets.isGetTicket  ? <Button label=\"ĐÃ LẤY\" className=\"p-button-success\"/> :\r\n                                                                <Button label=\"CHƯA LẤY\" className=\"p-button-warning\" onClick={getTickets}/>}</div>\r\n                <div className='p-grid p-mt-2' >\r\n                    <div className='p-col-2'>Ghế</div>\r\n                    <div className='p-col-3'>Tên Phim</div>\r\n                    <div className='p-col-2'>Rạp số</div>\r\n                    <div className='p-col-5'>Ngày giờ</div>\r\n                </div>\r\n                {elmItem}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Panel header=\"Danh sách các phim\">\r\n            <Toast ref={toast} />\r\n            <div className=\"p-grid\">\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Quét mã\" icon=\"pi pi-print\" className=\"p-button-success\" onClick={() => {setDisplayModal(true);setResult('Not Found');setTickets({});}}/>\r\n\r\n                   \r\n                \r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"p-grid\">\r\n                <Dialog header={'Quét mã'} maximizable onHide={() => {setDisplayModal(false);setResult('Not Found');setTickets({});\r\n                    }} visible={displayModal}  breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n                    <div className=\"p-grid\">    \r\n                        <div className=\"p-col-6\">\r\n                            <QrReader\r\n                                delay={300}\r\n                                onError={handleError}\r\n                                onScan={handleScan}\r\n                                style={{ width: '100%' }}\r\n                            />\r\n                        </div>\r\n                        <div className=\"p-col-6\">\r\n                            <div className='p-grid'>\r\n                                <div className=\"p-col-8\"><h3>Mã Hoá Đơn: {result}</h3></div>\r\n                                <div className=\"p-col-4 p-mt-3\"><Button label=\"Nhận vé\" className=\"p-button-success\" onClick={() => getListTicket()}/></div>\r\n                            </div>\r\n                            {showListTicket()}\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </Dialog>\r\n            </div>\r\n            <div className=\"datatable-templating-demo\">\r\n                <div className=\"card\">\r\n                    <DataTable value={data} paginator rows={10} scrollable scrollHeight=\"500px\"\r\n                        selection={selectedList} \r\n                        onSelectionChange={setSelectedRowCustomize} \r\n                        selectionMode=\"single\" \r\n                        dataKey=\"id\"\r\n                        stateStorage=\"local\" \r\n                        stateKey=\"dt-state-demo-local\"\r\n                        emptyMessage=\"Không có hoá đơn nào\">\r\n                        <Column field=\"id\" header=\"Mã hoá đơn\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"customerName\" header=\"Tên người đặt\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"customerPhone\" header=\"Số điện thoại\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"paymentType\" header=\"Hình thức thanh toán\" body={statusPaymentType} sortable ></Column>\r\n                        <Column field=\"isGetTicket\" header=\"Trạng thái\" sortable body={statusBodyTemplate}></Column>\r\n                        <Column field=\"paymentDate\" header=\"Ngày thanh toán\" body={(rowData) => toDateTimeString(rowData.paymentDate)} sortable ></Column>\r\n\r\n                        <Column field=\"createdDate\" header=\"Ngày tạo\" body={(rowData) => toDateTimeString(rowData.createdDate)} sortable ></Column>\r\n                        <Column field=\"createdBy\" header=\"Người tạo\" sortable  filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"updateDate\" header=\"Ngày cập nhật\" body={(rowData) => toDateTimeString(rowData.updateDate)} sortable  ></Column>\r\n                        <Column field=\"updateBy\" header=\"Người cập nhật\" sortable  filterPlaceholder=\"Search by name\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        </Panel>\r\n    )\r\n}\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Sessions\\Session.js",["190","191","192","193","194","195","196"],"import { Panel } from 'primereact/panel';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request'\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { toDateTimeString } from \"../utils/date\";\r\nimport { numberFormat } from \"../utils/number\";\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { useFormik } from 'formik';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Calendar } from 'primereact/calendar';\r\n\r\nfunction Session() {\r\n    const toast = useRef(null);\r\n    const [data, setData] = useState({});\r\n    const [listCategories, setListCategories] = useState([]);\r\n    const [selectedList, setSelectedList] = useState({});\r\n    const [displayModal, setDisplayModal] = useState(false);\r\n    const [isInsert, setIsInsert] = useState(true);\r\n    const [checked, setChecked] = useState(false);\r\n    const [control, setControl] = useState(true);\r\n\r\n    const [listMovie, setListMovie] = useState(null);\r\n    const [listCinema, setListCinema] = useState(null);\r\n    const listStatus = [\r\n        {id : 0, name : \"Tất cả\"},\r\n        {id : 1, name : \"Chưa chiếu\"}\r\n    ];\r\n    const [status, setStatus] = useState(listStatus[0]);\r\n\r\n    let today = new Date();\r\n    let month = today.getMonth();\r\n    let year = today.getFullYear();\r\n    let prevMonth = (month === 0) ? 11 : month - 1;\r\n    let prevYear = (prevMonth === 11) ? year - 1 : year;\r\n    let minDate = new Date();\r\n    minDate.setMonth(prevMonth);\r\n    minDate.setFullYear(prevYear);\r\n\r\n    useEffect(() => {\r\n        reloadData(0);\r\n        if(localStorage.getItem('role') === 'ROLE_ADMIN') {\r\n            setControl(false);\r\n        };\r\n        \r\n    }, [])\r\n\r\n    const setSelectedRowCustomize = (e) => {\r\n        setSelectedList(e.value);\r\n    };\r\n\r\n    const getListMovie = () =>{\r\n        API.get('/api/admin/movie', \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setListMovie(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n    }\r\n    \r\n    const getListCinema = () =>{\r\n        API.get('/api/admin/cinema', \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setListCinema(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n    }\r\n    \r\n    const reloadDatabyStatus =  () =>{\r\n        let urlAPI = (status.id == 0 ? '/api/admin/session' : '/api/admin/session/available');\r\n\r\n        API.get(urlAPI, \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setData(res.data.data);\r\n                console.log(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n        setSelectedList({});\r\n    }\r\n\r\n    const reloadData =  (status) =>{\r\n        let urlAPI = (status == 0 ? '/api/admin/session' : '/api/admin/session/available');\r\n\r\n        API.get(urlAPI, \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setData(res.data.data);\r\n                console.log(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n        setSelectedList({});\r\n    }\r\n    \r\n    const deleteItem = () => {\r\n        API.post('/api/admin/session/delete', [selectedList.id], \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                if(res.data.ok){\r\n                    toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }else{\r\n                    toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }\r\n                reloadDatabyStatus();\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n                toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n        });\r\n    }\r\n    const rejectFunc = () =>{\r\n\r\n    }\r\n\r\n    const confirm = () => {\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần xoá.', life: 3000});\r\n        }else\r\n            confirmDialog({\r\n                message: 'Suất chiếu lúc: '+toDateTimeString(selectedList.showTime)+' - Phim: '+selectedList.movie.name+' - Rạp: '+selectedList.cinema.name,\r\n                header: 'Bạn có muốn xoá ?',\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => deleteItem(),\r\n                reject: () => rejectFunc()\r\n            });\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: '',\r\n            movieId: '',\r\n            cinemaId: '',\r\n            time: ''\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if(!data.cinemaId){\r\n                errors.cinemaId = 'Rạp không được thiếu.';\r\n            }\r\n            if(!data.movieId){\r\n                errors.movieId = 'Phim không được thiếu.';\r\n            }\r\n            if(!data.time && isInsert){\r\n                errors.time = 'Thời gian chiếu không được thiếu.';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            \r\n            data.time = data.time.getFullYear()+'-'+(data.time.getMonth()+1)+'-'+data.time.getDate()+' '+\r\n                        data.time.getHours()+':'+data.time.getMinutes()+':'+data.time.getSeconds();\r\n            \r\n            API.post('/api/admin/session', data, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    console.log(res.data);\r\n                    if(res.data.ok){\r\n                        toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                        reloadDatabyStatus();\r\n                        setDisplayModal(false);\r\n                    }else{\r\n                        toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }\r\n                    \r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error);\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n    });\r\n\r\n    const footer = (\r\n        <div>\r\n            <Button label={isInsert ? 'Thêm': 'Cập nhật'} icon=\"pi pi-check\" onClick={formik.handleSubmit}/>\r\n            <Button label=\"Huỷ\" icon=\"pi pi-times\" onClick={() =>setDisplayModal(false)}/>\r\n        </div>\r\n    );\r\n\r\n    const create = () =>{\r\n        setDisplayModal(true);\r\n        setIsInsert(true);\r\n        getListMovie();\r\n        getListCinema();\r\n        formik.setFieldValue('id' , '');\r\n        formik.setFieldValue('cinemaId' , '');\r\n        formik.setFieldValue('movieId' , '');\r\n        formik.setFieldValue('time' , '');\r\n    };\r\n\r\n    const update = () =>{\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần cập nhật.', life: 3000});\r\n        }else{\r\n            setDisplayModal(true);\r\n            setIsInsert(false);\r\n            getListMovie();\r\n            getListCinema();\r\n            formik.setFieldValue('id' , selectedList.id);\r\n            formik.setFieldValue('cinemaId' , selectedList.cinema.id);\r\n            formik.setFieldValue('movieId' , selectedList.movie.id);\r\n            formik.setFieldValue('time' , new Date(selectedList.showTime));\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    \r\n    \r\n    \r\n\r\n    const toBookedTicket = (rowData) =>{\r\n        return rowData.numberBooked +'/'+rowData.cinema.numberSeats;\r\n    }\r\n\r\n    const toDateOfWeek = (rowData) => {\r\n        const birthday = new Date(rowData.showTime);\r\n        const day = birthday.getDay();\r\n        return (day === 0 ? 'Chủ nhật' : 'Thứ '+(day+1));\r\n    }\r\n\r\n    return (\r\n        <Panel header=\"Danh sách các suất chiếu\">\r\n            <Toast ref={toast} />\r\n            <div className=\"p-grid\">\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Thêm\" icon=\"pi pi-plus\" className=\"p-button-success\" onClick={create} disabled={control}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Sửa\" icon=\"pi pi-pencil\" className=\"p-button-info\" onClick={update} disabled={control}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Xoá\" icon=\"pi pi-times\" className=\"p-button-danger\" onClick={confirm} disabled={control}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"p-grid p-mb-5\">\r\n                <Dropdown\r\n                    id=\"status\"\r\n                    name=\"status\"\r\n                    value={status}\r\n                    //placeholder={'Trạng thái'}\r\n                    options={listStatus}\r\n                    optionLabel=\"name\"\r\n                    optionValue=\"id\"\r\n                    onChange={(e) => {\r\n                        setStatus(e.value);\r\n                        reloadData(e.value);\r\n                    }}\r\n                    className=\"p-inputtext-sm\"\r\n                />\r\n            </div>\r\n            <div className=\"p-grid\">\r\n                <Dialog header={isInsert ? 'Thêm mới' : 'Cập nhật'} maximizable onHide={() => setDisplayModal(false)} visible={displayModal} footer={footer}  breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\">\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-field p-mt-4 p-col-6 \">\r\n                                <label htmlFor=\"cinemaId\" class=\"p-mb-2\">Rạp số</label>\r\n                                <Dropdown\r\n                                    id=\"cinemaId\"\r\n                                    name=\"cinemaId\"\r\n                                    placeholder={'Chọn rạp'}\r\n                                    options={listCinema}\r\n                                    optionLabel=\"name\"\r\n                                    optionValue=\"id\"\r\n                                    {...formik.getFieldProps('cinemaId')}\r\n                                    onChange={(e) => {\r\n                                        formik.handleChange(e);\r\n                                    }}\r\n                                    className=\"p-inputtext-sm\"\r\n                                />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.cinemaId ? formik.errors.cinemaId : ''}</small>\r\n                            </div>\r\n                            <div className=\"p-field p-mt-4 p-col-6 \">\r\n                                <label htmlFor=\"movieId\" class=\"p-mb-2\">Phim</label>\r\n                                <Dropdown\r\n                                    id=\"movieId\"\r\n                                    name=\"movieId\"\r\n                                    placeholder={'Chọn phim'}\r\n                                    options={listMovie}\r\n                                    optionLabel=\"name\"\r\n                                    optionValue=\"id\"\r\n                                    {...formik.getFieldProps('movieId')}\r\n                                    onChange={(e) => {\r\n                                        formik.handleChange(e);\r\n                                    }}\r\n                                    className=\"p-inputtext-sm\"\r\n                                />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.movieId ? formik.errors.movieId : ''}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-field p-mt-4 p-col-12 \">\r\n                                <label htmlFor=\"time\" class=\"p-mb-2\">Thời gian chiếu</label>\r\n                                <Calendar id=\"time\" value={formik.values.time}  dateFormat=\"dd/mm/yy\"\r\n                                {...formik.getFieldProps('time')} \r\n                                onChange={formik.handleChange} showTime showSeconds />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.time ? formik.errors.time : ''}</small>\r\n\r\n                                \r\n\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </Dialog>\r\n            </div>\r\n            <div className=\"datatable-templating-demo\">\r\n                <div className=\"card\">\r\n                    <DataTable value={data} paginator rows={10} scrollable scrollHeight=\"500px\"\r\n                        selection={selectedList} \r\n                        onSelectionChange={setSelectedRowCustomize} \r\n                        selectionMode=\"single\" \r\n                        dataKey=\"id\"\r\n                        stateStorage=\"local\" \r\n                        stateKey=\"dt-state-demo-local\"\r\n                        emptyMessage=\"Không có suất chiếu nào\">\r\n                        \r\n                        <Column field=\"cinema.name\" header=\"Rạp số\" sortable filter filterPlaceholder=\"Search...\"></Column>\r\n                        <Column field=\"movie.name\" header=\"Tên phim\" sortable filter filterPlaceholder=\"Search...\"></Column>\r\n                        <Column field=\"movie.screenTime\" header=\"Thời lượng phim\" sortable filter filterPlaceholder=\"Search...\"></Column>\r\n                        <Column header=\"Thứ\"  body={(rowData) => toDateOfWeek(rowData)} sortable filter filterPlaceholder=\"Search...\"></Column>\r\n                        <Column field=\"showTime\" header=\"Giờ bắt đầu\" body={(rowData) => toDateTimeString(rowData.showTime)} sortable filter filterPlaceholder=\"Search...\"></Column>\r\n                        <Column field=\"finishTime\" header=\"Giờ kết thúc\" body={(rowData) => toDateTimeString(rowData.finishTime)} sortable filter filterPlaceholder=\"Search...\"></Column>\r\n                        <Column header=\"Số vé bán\" body={(rowData) => toBookedTicket(rowData)} sortable filter filterPlaceholder=\"Search...\"></Column>\r\n\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default Session\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Cinemas\\Cinema.js",["197"],"import { Panel } from 'primereact/panel';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request'\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { toDateTimeString } from \"../utils/date\";\r\nimport { numberFormat } from \"../utils/number\";\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { useFormik } from 'formik';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\n\r\nexport default function Cinema() {\r\n    const toast = useRef(null);\r\n    const [data, setData] = useState({});\r\n    const [selectedList, setSelectedList] = useState({});\r\n    const [displayModal, setDisplayModal] = useState(false);\r\n    const [isInsert, setIsInsert] = useState(true);\r\n    const [priceTypeCinema, setPriceTypeCinema] = useState(0);\r\n    const listTypeCinema = [\r\n        {id : 0, name : 'RAP_2D', price : 60000},\r\n        {id : 1, name : 'RAP_3D', price : 70000},\r\n        {id : 2, name : 'RAP_IMAX', price : 100000},\r\n    ]\r\n\r\n    const listNumberSeat = [\r\n        {id : 40, name : '40'},\r\n        {id : 50, name : '50'}\r\n    ]\r\n\r\n    useEffect(() => {\r\n        reloadData();\r\n    }, [])\r\n\r\n    const setSelectedRowCustomize = (e) => {\r\n        setSelectedList(e.value);\r\n    };\r\n    \r\n    const reloadData = () =>{\r\n        API.get('/api/admin/cinema', \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setData(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n        setSelectedList({});\r\n    }\r\n    \r\n    const deleteItem = () => {\r\n        API.post('/api/admin/cinema/delete', [selectedList.id], \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                if(res.data.ok){\r\n                    toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }else{\r\n                    toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }\r\n                reloadData();\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n                toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n        });\r\n    }\r\n    const rejectFunc = () =>{\r\n\r\n    }\r\n\r\n    const confirm = () => {\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần xoá.', life: 3000});\r\n        }else\r\n            confirmDialog({\r\n                message: 'Bạn có muốn xoá Rạp số: '+selectedList.name+' ? ',\r\n                header: 'Thông báo',\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => deleteItem(),\r\n                reject: () => rejectFunc()\r\n            });\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id : '',\r\n            name : 0,\r\n            typeOfCinema : '',\r\n            numberSeats : '',\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if (!data.name) {\r\n                errors.name = 'Tên rạp không được để trống.';\r\n            }\r\n            if (data.typeOfCinema === '') {\r\n                errors.typeOfCinema = 'Loại rạp không được thiếu.';\r\n            }\r\n            if (!data.numberSeats || data.numberSeats === '') {\r\n                errors.numberSeats = 'Số lượng ghế không được thiếu.';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            console.log(data);\r\n            API.post('/api/admin/cinema', data, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    if(res.data.ok){\r\n                        toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                        reloadData();\r\n                        setDisplayModal(false);\r\n                    }else{\r\n                        toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }\r\n                    \r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error);\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n    });\r\n\r\n    const footer = (\r\n        <div>\r\n            <Button label={isInsert ? 'Thêm': 'Cập nhật'} icon=\"pi pi-check\" onClick={formik.handleSubmit}/>\r\n            <Button label=\"Huỷ\" icon=\"pi pi-times\" onClick={() =>setDisplayModal(false)}/>\r\n        </div>\r\n    );\r\n\r\n    const createCategory = () =>{\r\n        setDisplayModal(true);\r\n        setIsInsert(true);\r\n        setPriceTypeCinema(0);\r\n        formik.setFieldValue('id' , '');\r\n        formik.setFieldValue('name' , 0);\r\n        formik.setFieldValue('typeOfCinema' , '');\r\n        formik.setFieldValue('numberSeats' , '');\r\n    };\r\n\r\n    const updateCategory = () =>{\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần cập nhật.', life: 3000});\r\n        }else{\r\n            setDisplayModal(true);\r\n            setIsInsert(false);\r\n            formik.setFieldValue('id' , selectedList.id);\r\n            formik.setFieldValue('name' , selectedList.name);\r\n            const idType = listTypeCinema.find(ele => ele.name === selectedList.type).id;\r\n            formik.setFieldValue('typeOfCinema' , idType);\r\n            setPriceTypeCinema(listTypeCinema[idType].price);\r\n            formik.setFieldValue('numberSeats' , selectedList.numberSeats);}\r\n    };\r\n\r\n    const isFormFieldValid = (name) => !!(formik.touched[name] && formik.errors[name]);\r\n    const getFormErrorMessage = (name) => {\r\n        return isFormFieldValid(name) && <small className=\"p-error\">{formik.errors[name]}</small>;\r\n    };\r\n\r\n    return (\r\n        <Panel header=\"Danh sách các rạp phim\">\r\n            <Toast ref={toast} />\r\n            <div className=\"p-grid\">\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Thêm\" icon=\"pi pi-plus\" className=\"p-button-success\" onClick={createCategory}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Sửa\" icon=\"pi pi-pencil\" className=\"p-button-info\" onClick={updateCategory}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Xoá\" icon=\"pi pi-times\" className=\"p-button-danger\" onClick={confirm}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"p-grid\">\r\n                <Dialog header={isInsert ? 'Thêm mới' : 'Cập nhật'} onHide={() => setDisplayModal(false)} visible={displayModal} footer={footer}  breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\">\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-field p-mt-4 p-col-6\">\r\n                                <label htmlFor=\"name\">Rạp số</label>\r\n                                <span className=\"p-float-label\"> \r\n                                    <InputNumber id=\"name\" name=\"name\" value={formik.values.name} \r\n                                    disabled={!isInsert}\r\n                                    onValueChange={formik.handleChange} mode=\"decimal\" autoFocus showButtons min={1}/>\r\n                                </span>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.name ? formik.errors.name : ''}</small>\r\n                            </div>\r\n                            <div className=\"p-field p-mt-4 p-col-6\">\r\n                                <label htmlFor=\"price\">Giá</label>\r\n                                <span className=\"p-float-label\">\r\n                                    <InputText id=\"price\"  disabled={true} name=\"price\" \r\n                                    value={numberFormat(priceTypeCinema)} onChange={formik.handleChange} autoFocus />\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid\">\r\n                            <div className=\"p-field p-col-6\">\r\n                                <label htmlFor=\"typeOfCinema\">Loại rạp</label>\r\n                                <span className=\"p-float-label\">\r\n                                    <Dropdown\r\n                                        id=\"typeOfCinema\"\r\n                                        name=\"typeOfCinema\"\r\n                                        placeholder={'Chọn loại rạp'}\r\n                                        options={listTypeCinema}\r\n                                        optionLabel=\"name\"\r\n                                        optionValue=\"id\"\r\n                                        {...formik.getFieldProps('typeOfCinema')}\r\n                                        onChange={(e) => {\r\n                                            formik.handleChange(e);\r\n                                            setPriceTypeCinema(listTypeCinema.find(ele => ele.id === e.value).price);\r\n                                        }}\r\n                                        className=\"p-inputtext-sm\"\r\n                                    />\r\n                                </span>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.typeOfCinema? formik.errors.typeOfCinema: ''}</small>\r\n                            </div>\r\n                            <div className=\"p-field p-col-6\">\r\n                                <label htmlFor=\"numberSeats\">Số lượng ghế</label>\r\n                                <span className=\"p-float-label\">\r\n                                    <Dropdown\r\n                                        id=\"numberSeats\"\r\n                                        name=\"numberSeats\"\r\n                                        placeholder={'Chọn số lượng ghế'}\r\n                                        options={listNumberSeat}\r\n                                        optionLabel=\"name\"\r\n                                        optionValue=\"id\"\r\n                                        {...formik.getFieldProps('numberSeats')}\r\n                                        onChange={(e) => {\r\n                                            formik.handleChange(e);\r\n                                        }}\r\n                                        className=\"p-inputtext-sm\"\r\n                                    />\r\n                                </span>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.numberSeats ? formik.errors.numberSeats : ''}</small>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </Dialog>\r\n            </div>\r\n            <div className=\"card\">\r\n                    <DataTable value={data} paginator rows={10}\r\n                        selection={selectedList} \r\n                        onSelectionChange={setSelectedRowCustomize} \r\n                        selectionMode=\"single\" \r\n                        dataKey=\"id\"\r\n                        stateStorage=\"local\" \r\n                        stateKey=\"dt-state-demo-local\"\r\n                        emptyMessage=\"Không có rạp nào\">\r\n                        <Column field=\"name\" header=\"Rạp số\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"type\" header=\"Loại rạp\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"numberSeats\" header=\"Số lượng ghế\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"price\" header=\"Giá tiền\" body={(rowData) => numberFormat(rowData.price)} style={{right: '0px'}} sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n\r\n                        <Column field=\"createdDate\" header=\"Ngày tạo\" body={(rowData) => toDateTimeString(rowData.createdDate)} sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"createdBy\" header=\"Người tạo\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"updateDate\" header=\"Ngày cập nhật\" body={(rowData) => toDateTimeString(rowData.updateDate)} sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"updateBy\" header=\"Người cập nhật\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                    </DataTable>\r\n            </div>\r\n        </Panel>\r\n    )\r\n}\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Categories\\Category.js",["198","199","200"],"import { Panel } from 'primereact/panel';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request'\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { toDateTimeString } from \"../utils/date\";\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { useFormik } from 'formik';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\n\r\nconst Category = () => {\r\n    const toast = useRef(null);\r\n    const [data, setData] = useState({});\r\n    const [selectedList, setSelectedList] = useState({});\r\n    const [displayModal, setDisplayModal] = useState(false);\r\n    const [isInsert, setIsInsert] = useState(true);    \r\n\r\n    useEffect(() => {\r\n        reloadData();\r\n    }, [])\r\n\r\n    const setSelectedRowCustomize = (e) => {\r\n        setSelectedList(e.value);\r\n    };\r\n    \r\n    const reloadData = () =>{\r\n        API.get('/api/admin/category', \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setData(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n        setSelectedList({});\r\n    }\r\n    \r\n    const deleteItem = () => {\r\n        API.post('/api/admin/category/delete', [selectedList.id], \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                if(res.data.ok){\r\n                    toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }else{\r\n                    toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }\r\n                reloadData();\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n                toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n        });\r\n    }\r\n    const rejectFunc = () =>{\r\n\r\n    }\r\n\r\n    const confirm = () => {\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần xoá.', life: 3000});\r\n        }else\r\n            confirmDialog({\r\n                message: 'Bạn có muốn xoá \\\"'+selectedList.name+'\\\" ? ',\r\n                header: 'Thông báo',\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => deleteItem(),\r\n                reject: () => rejectFunc()\r\n            });\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id : '',\r\n            name: ''\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if (!data.name) {\r\n                errors.name = 'Tên thể loại không được để trống.';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            API.post('/api/admin/category', data, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    if(res.data.ok){\r\n                        toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }else{\r\n                        toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }\r\n                    reloadData();\r\n                    setDisplayModal(false);\r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error);\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n    });\r\n\r\n    const footer = (\r\n        <div>\r\n            <Button label={isInsert ? 'Thêm': 'Cập nhật'} icon=\"pi pi-check\" onClick={formik.handleSubmit}/>\r\n            <Button label=\"Huỷ\" icon=\"pi pi-times\" onClick={() =>setDisplayModal(false)}/>\r\n        </div>\r\n    );\r\n\r\n    const createCategory = () =>{\r\n        setDisplayModal(true);\r\n        setIsInsert(true);\r\n        formik.setFieldValue('id' , '');\r\n        formik.setFieldValue('name' , '');\r\n    };\r\n\r\n    const updateCategory = () =>{\r\n        if(selectedList.id == null){\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn dòng cần cập nhật.', life: 3000});\r\n        }else{\r\n            setDisplayModal(true);\r\n            setIsInsert(false);\r\n            formik.setFieldValue('id' , selectedList.id);\r\n            formik.setFieldValue('name' , selectedList.name);\r\n        }\r\n        \r\n    };\r\n\r\n    const isFormFieldValid = (name) => !!(formik.touched[name] && formik.errors[name]);\r\n    const getFormErrorMessage = (name) => {\r\n        return isFormFieldValid(name) && <small className=\"p-error\">{formik.errors[name]}</small>;\r\n    };\r\n\r\n    \r\n\r\n    return (\r\n        <Panel header=\"Danh sách thể loại phim\">\r\n            <Toast ref={toast} />\r\n            <div className=\"p-grid\">\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Thêm\" icon=\"pi pi-plus\" className=\"p-button-success\" onClick={createCategory}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Sửa\" icon=\"pi pi-pencil\" className=\"p-button-info\" onClick={updateCategory}/>\r\n                </div>\r\n                <div className=\"p-field p-mr-2\">\r\n                    <Button label=\"Xoá\" icon=\"pi pi-times\" className=\"p-button-danger\" onClick={confirm}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"p-grid\">\r\n                <Dialog header={isInsert ? 'Thêm mới' : 'Cập nhật'} onHide={() => setDisplayModal(false)} visible={displayModal} footer={footer}  breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\">\r\n                        <div className=\"p-field p-mt-4\">\r\n                            <label htmlFor=\"name\">Tên thể loại</label>\r\n                            <span className=\"p-float-label\">\r\n                                <InputText id=\"name\" placeholder='Tên thể loại' name=\"name\" value={formik.values.name} onChange={formik.handleChange} autoFocus />\r\n                            </span>\r\n                            <small className=\"p-error p-d-block\">{formik.touched.name ? formik.errors.name : ''}</small>\r\n                        </div>\r\n                    </form>\r\n                </Dialog>\r\n            </div>\r\n            <div className=\"card\">\r\n                    <DataTable value={data} paginator rows={10}\r\n                        selection={selectedList} \r\n                        onSelectionChange={setSelectedRowCustomize} \r\n                        selectionMode=\"single\" \r\n                        dataKey=\"id\"\r\n                        stateStorage=\"local\" \r\n                        stateKey=\"dt-state-demo-local\"\r\n                        emptyMessage=\"Không có thể loại nào\">\r\n                        <Column field=\"name\" header=\"Tên thể loại\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"createdDate\" header=\"Ngày tạo\" body={(rowData) => toDateTimeString(rowData.createdDate)} sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"createdBy\" header=\"Người tạo\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"updateDate\" header=\"Ngày cập nhật\" body={(rowData) => toDateTimeString(rowData.updateDate)} sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                        <Column field=\"updateBy\" header=\"Người cập nhật\" sortable filter filterPlaceholder=\"Search by name\"></Column>\r\n                    </DataTable>\r\n            </div>\r\n        </Panel>\r\n    )\r\n}\r\nexport default Category;","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\utils\\date.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\utils\\number.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\utils\\constants.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Page404\\Page404.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Header\\Header.js",["201"],"import React, { useState, useEffect } from 'react';\r\nimport { Button } from './Button';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\nimport { Avatar } from 'primereact/avatar';\r\nfunction Header() {\r\n    const [click, setClick] = useState(false);\r\n    const [button, setButton] = useState(true);\r\n  \r\n    const handleClick = () => setClick(!click);\r\n    const closeMobileMenu = () => setClick(false);\r\n  \r\n    const showButton = () => {\r\n      if (window.innerWidth <= 960) {\r\n        setButton(false);\r\n      } else {\r\n        setButton(true);\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      showButton();\r\n    }, []);\r\n  \r\n    window.addEventListener('resize', showButton);\r\n    \r\n    const logout = () => {\r\n      localStorage.clear();\r\n    }\r\n\r\n    const showButtonSigninOrUsername = () =>{\r\n      if(localStorage.getItem('token')!==null){\r\n        return (\r\n          <div class=\"dropdown\">\r\n            <Button buttonStyle='btn--outline' class=\"dropbtn\" >{localStorage.getItem('username')}</Button>\r\n            <div class=\"dropdown-content\">\r\n              <Link to='/user/account/info' className='nav-links'>Tài khoản</Link>\r\n              <Link to='/login' className='nav-links' onClick={logout}>Đăng xuất</Link>\r\n            </div>\r\n          </div>\r\n        );\r\n      }else{\r\n        return (button && <Button buttonStyle='btn--outline' to={'/login'}>Đăng nhập</Button>);\r\n      }\r\n      \r\n    }\r\n\r\n    return (\r\n      <>\r\n        <nav className='navbar'>\r\n          <div className='navbar-container'>\r\n            <Link to='/' className='navbar-logo' onClick={closeMobileMenu}>\r\n              GMOVIE\r\n              <i class='fab fa-typo3' />\r\n            </Link>\r\n            <div className='menu-icon' onClick={handleClick}>\r\n              <i className={click ? 'fas fa-times' : 'fas fa-bars'} />\r\n            </div>\r\n            <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n              <li className='nav-item'>\r\n                <Link to='/' className='nav-links' onClick={closeMobileMenu}>\r\n                  Trang chủ\r\n                </Link>\r\n              </li>\r\n\r\n              <li className='nav-item'>\r\n                <Link\r\n                  to='/movie/session'\r\n                  className='nav-links'\r\n                  onClick={closeMobileMenu}\r\n                >\r\n                  Suất chiếu\r\n                </Link>\r\n              </li>\r\n  \r\n              <li>\r\n                <Link\r\n                  to={localStorage.getItem('token')!==null ? '/user/account/info' : '/login'}\r\n                  className='nav-links-mobile'\r\n                  onClick={closeMobileMenu}\r\n                >\r\n                  {localStorage.getItem('token')!==null ? localStorage.getItem('username') : 'Đăng nhập'}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            {showButtonSigninOrUsername()}\r\n          </div>\r\n        </nav>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Header\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Header\\Button.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Slideshow\\Slideshow.js",["202"],"import './Slideshow.css'\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request';\r\nimport { APPCONFIG } from '../utils/constants';\r\n\r\nfunction Slideshow() {\r\n    const [index, setIndex] = useState(0);\r\n    const timeoutRef = useRef(null);\r\n    const [slide, setSlide] = useState([]);\r\n    const delay = 5500;\r\n\r\n    useEffect(() => {\r\n      API.get('/api/public/home/slide')\r\n            .then((res) =>{\r\n              const images = [];\r\n              console.log(res.data);\r\n              res.data.forEach(element => {\r\n                images.push(APPCONFIG.BASE_URL_IMAGE_SLIDE+element);\r\n              });\r\n              console.log(images);\r\n              setSlide(images);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n    }, [])\r\n  \r\n    function resetTimeout() {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    }\r\n  \r\n    useEffect(() => {\r\n      resetTimeout();\r\n      timeoutRef.current = setTimeout(\r\n        () =>\r\n          setIndex((prevIndex) =>\r\n            prevIndex === slide.length - 1 ? 0 : prevIndex + 1\r\n          ),\r\n        delay\r\n      );\r\n  \r\n      return () => {\r\n        resetTimeout();\r\n      };\r\n    }, [index]);\r\n  \r\n    return (\r\n      <div className=\"slideshow\" style={{color: 'black'}}>\r\n        <div\r\n          className=\"slideshowSlider\"\r\n          style={{ transform: `translate3d(${-index * 100}%, 0, 0)` }}\r\n        >\r\n          {slide.map((backgroundImage, index) => (\r\n            <div\r\n              className=\"slide\"\r\n              key={index}\r\n              style={{ \r\n                backgroundImage: `url(${slide[index]})`,\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundSize: '100%'\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n  \r\n        <div className=\"slideshowDots\">\r\n          {slide.map((_, idx) => (\r\n            <div\r\n              key={idx}\r\n              className={`slideshowDot${index === idx ? \" active\" : \"\"}`}\r\n              onClick={() => {\r\n                setIndex(idx);\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Slideshow;\r\n\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\UserHome\\UserHome.js",["203","204","205","206"],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\Movie\\Movie.js",["207","208"],"import { APPCONFIG } from '../../containers/utils/constants';\r\nimport { Button } from 'primereact/button';\r\nimport './Movie.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Movie  = (props) => {\r\n    return (\r\n        <div className=\"movie\">\r\n            <Link to={'/movie/detail/'+props.data.id}>\r\n                <img src={APPCONFIG.BASE_URL_IMAGE+props.data.pathThumbnail}/>\r\n            </Link>\r\n            <div className=\"movie-info\">\r\n                <h3>{props.data.name}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Movie\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\Footer\\Footer.js",["209","210","211","212","213","214","215","216"],"import \"./Footer.css\"\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"footer-col\">\r\n                        <h4>Theo dõi</h4>\r\n                        <div className=\"social-links\">\r\n                            <a href=\"#\"><i className=\"fab fa-facebook-f\"></i></a>\r\n                            <a href=\"#\"><i className=\"fab fa-twitter\"></i></a>\r\n                            <a href=\"#\"><i className=\"fab fa-instagram\"></i></a>\r\n                            <a href=\"#\"><i className=\"fab fa-linkedin-in\"></i></a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"footer-col\">\r\n                        <h4>Hỗ trợ</h4>\r\n                        <ul>\r\n                            <li><a href=\"#\">Phim</a></ li>\r\n                            <li><a href=\"/movie/session\">Suất chiếu</a></ li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"footer-col\">\r\n                        <h4>Liên hệ</h4>\r\n                        <ul>\r\n                            <li><a href=\"#\">0985145125</a></li>\r\n                            <li><a href=\"#\">tuananh101lk@gmail.com</a></li>\r\n                            <li><a href=\"#\">60 Vạn Kiếp, phường 7, quận Phú Nhuận, Hồ chí minh</a></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\UserMovieDetail\\UserMovieDetail.js",["217","218","219","220","221","222","223"],"import Header from '../../Header/Header';\r\nimport Footer from '../../../components/Footer/Footer';\r\nimport { useParams } from \"react-router-dom\";\r\nimport './UserMovieDetail.css';\r\nimport { useState,useEffect,useRef } from 'react';\r\nimport API from '../../utils/request';\r\nimport { APPCONFIG } from '../../utils/constants';\r\nimport { Button } from 'primereact/button';\r\nimport ReactPlayer from \"react-player\"\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nfunction UserMovieDetail() {\r\n    const params = useParams();\r\n    const [data, setData] = useState({});\r\n    const [displayModal, setDisplayModal] = useState(false);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        API.get('/api/public/movie/'+params.id)\r\n            .then((res) =>{\r\n              if(res.data.data == null){\r\n                  setData({});\r\n              }else{\r\n                  if(res.data.ok){\r\n                      setData(res.data.data[0]);\r\n                  }else setData({});\r\n              }\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n    }, [params.id])\r\n\r\n\r\n    const buyTicket = () =>{\r\n        history.push(\"/movie/session\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"body-container\">\r\n            <Header/>\r\n            {   Object.keys(data).length == 0 ?\r\n                <h1 style={{textAlign:'center'}}>Không tìm thấy phim</h1> :\r\n                (\r\n                    <div className=\"p-grid\" style={{justifyContent: 'center'}}>\r\n                        {/* <div className=\"p-col-12\"> */}\r\n                            <div className=\"p-col-3\" style={{width:'250px'}}>\r\n                                <div className=\"p-grid\">\r\n                                    <img src={APPCONFIG.BASE_URL_IMAGE+data.pathThumbnail} \r\n                                        style={{objectFit: 'cover',\r\n                                            maxWidth: '100%',\r\n                                            imageRendering: 'auto',\r\n                                            imageRendering: 'crisp-edges',\r\n                                            imageRendering: 'pixelated'}}/>\r\n                                </div>\r\n                                <div className=\"p-grid p-mt-5\">\r\n                                    <Button label=\"Trailer\" className=\"p-button-info\" onClick={() => setDisplayModal(true)} disabled={data.pathVideo=='' ? 'disabled' : ''}/>\r\n                                    <Button label=\"Mua vé\" className=\"p-button-info\" style={{marginRight : 0, marginLeft: 'auto'}} onClick={buyTicket}/>\r\n                                    { data.pathVideo == ''\r\n\r\n                                    }\r\n                                    <Dialog header={'Trailer'} onHide={() => setDisplayModal(false)} visible={displayModal} \r\n                                        breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{justifyContent: 'center',}}>\r\n                                        <ReactPlayer\r\n                                            url={data.pathVideo}\r\n                                        />\r\n                                    </Dialog>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-col-8 p-ml-5\">\r\n                                <div className=\"p-grid p-mt-2\">\r\n                                    <h1>{data.name}</h1> \r\n                                    {data.isShowing ? \r\n                                        <Button icon=\"pi pi-bell\" label=\"Đang công chiếu\" className=\"p-button-rounded p-button-warning p-button-outlined p-ml-2\" /> : ''\r\n                                    }\r\n                                </div>\r\n                                <div className=\"p-grid p-mt-2\">\r\n                                    <h3>Thể loại: {data.category[0].name}</h3>\r\n                                </div>\r\n                                <div className=\"p-grid p-mt-2\">\r\n                                    <h3>Thời lượng: {data.screenTime} phút</h3>\r\n                                </div>\r\n                                <div className=\"p-grid p-mt-2\">\r\n                                    <p>{data.description}</p>\r\n                                </div>\r\n                                 \r\n                            </div>\r\n                        {/* </div> */}\r\n                    </div>\r\n                )\r\n            }\r\n                \r\n            \r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserMovieDetail\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\UserSession\\UserSession.js",["224","225","226","227","228","229","230","231","232"],"import Header from '../../Header/Header';\r\nimport Footer from '../../../components/Footer/Footer';\r\nimport { Button } from 'primereact/button';\r\nimport { useState,useEffect,useRef } from 'react';\r\nimport API from '../../utils/request';\r\nimport { toTimeString } from '../../utils/date'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nfunction UserSession() {\r\n    const [index, setIndex] = useState(0);\r\n    const [data, setData] = useState([]);\r\n    const [sessions, setSessions] = useState([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(localStorage.getItem('token')==null)\r\n            history.push(\"/login\");\r\n        API.post('/api/user/customer/username', {username:localStorage.getItem('username')}, \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n        .catch((error)=>{\r\n            if(error.response.status === 401){\r\n                history.push(\"/login\");\r\n            }\r\n        });\r\n\r\n        let lstDate = [];\r\n        for (let i = 0; i < 7; i++) {\r\n            let date = new Date();\r\n            date.setDate(date.getDate() + i);\r\n            let d = {\r\n                id : i,\r\n                value: date.getFullYear()+'-'+(date.getMonth()+1)+'-'+date.getDate(),\r\n                label: getDayOfWeek(date) +' '+date.getDate()+'/'+(date.getMonth()+1)\r\n            };\r\n            lstDate.push(d);\r\n        }\r\n        setData(lstDate);    \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let date = new Date();\r\n        let time = '';\r\n        if(data.length == 0){\r\n            time = date.getHours()+':'+date.getMinutes()+':'+date.getSeconds();\r\n        }else{\r\n            if(index == 0) time = date.getHours()+':'+date.getMinutes()+':'+date.getSeconds();\r\n            else time = '';\r\n        }\r\n\r\n        let body = {\r\n            date : (data.length == 0 ? (date.getFullYear()+'-'+(date.getMonth()+1)+'-'+date.getDate()) : data[index].value),\r\n            time : time\r\n        }\r\n\r\n        API.post('/api/public/session/inday', body)\r\n            .then((res) =>{\r\n              if(res.data.data.length > 0){\r\n                let arr = res.data.data;\r\n                setSessions(convertData(arr));\r\n              }else{\r\n                setSessions([]);    \r\n              }\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n    }, [index]);\r\n\r\n    const convertData = (arr) =>{\r\n        let lst = [];\r\n        for(let i = 0; i<arr.length; i++){\r\n            let movie = {};\r\n            movie[\"id\"] = arr[i].movie.id\r\n            movie[\"name\"] = arr[i].movie.name;\r\n            movie[\"pathThumbnail\"] = arr[i].movie.pathThumbnail;\r\n            let lstSession = []\r\n            let s = {}\r\n            s[\"id\"] = arr[i].id;\r\n            s[\"time\"] = toTimeString(arr[i].showTime);\r\n            lstSession.push(s);\r\n            if( i+1 < arr.length){\r\n                while(arr[i].movie.id == arr[i+1].movie.id){\r\n                    let session = {}\r\n                    session[\"id\"] = arr[i+1].id;\r\n                    session[\"time\"] = toTimeString(arr[i+1].showTime);\r\n                    lstSession.push(session);\r\n                    i++;\r\n                }\r\n            }\r\n            movie[\"session\"] = lstSession;\r\n            lst.push(movie);\r\n        }\r\n\r\n        return lst;\r\n    }\r\n\r\n    const getDayOfWeek = (day) =>{\r\n        return (day.getDay() === 0 ? 'Chủ nhật' : 'Thứ '+(day.getDay()+1));\r\n    }\r\n\r\n    const showLstButton = () => {\r\n        return (\r\n            <div>\r\n                {data.map((ele, i) => {\r\n                    return (<Button label={ele.label} key={i} \r\n                    className={'p-button-rounded p-button-success p-mr-5 p-mb-2 '+(index == ele.id ? '' : 'p-button-outlined')}  \r\n                    onClick={() => setIndex(ele.id)}/>);\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const redirectSessionDetail = (ele) => {\r\n        history.push(\"/movie/session/\"+ele.id);\r\n    }\r\n\r\n    const renderListItem = (lst) =>{\r\n        return(\r\n            <div>\r\n                {lst.map((ele, index)=>{\r\n                    return <Button label={ele.time} key={index} \r\n                    className=\"p-button-rounded p-button-info p-mr-2\" \r\n                    onClick={() => redirectSessionDetail(ele)}/>\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const showListSession = () => {\r\n        return (\r\n            <div>\r\n                {sessions.length == 0 ?\r\n                <div className=\"p-grid p-col-12\" style={{justifyContent: 'center'}}><h3>Không có suất chiếu nào</h3></div> :\r\n                sessions.map((ele, index)=>{\r\n                    return(\r\n                        <div className=\"p-grid p-col-12 p-mb-3\" key={index}>\r\n                            <div className=\"p-col-12 p-md-3 p-sm-12\"></div>\r\n                            <div className=\"p-col-12 p-md-3 p-sm-12\"><h3>{ele.name}</h3></div>\r\n                            <div className=\"p-col-12 p-md-6 p-sm-12\">{renderListItem(ele.session)}</div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"body-container\">\r\n            <Header/>          \r\n            <div className=\"p-grid\" style={{justifyContent: 'center'}}>\r\n                {showLstButton()}\r\n            </div>\r\n            \r\n                {showListSession()}\r\n            \r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserSession\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\UserSessionDetail\\UserSessionDetail.js",["233","234"],"import Header from '../../Header/Header';\r\nimport Footer from '../../../components/Footer/Footer';\r\nimport { useState,useEffect,useRef } from 'react';\r\nimport API from '../../utils/request';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { usePromiseTracker, trackPromise } from \"react-promise-tracker\";\r\nimport { toDateTString } from \"../../utils/date\";\r\nimport './UserSessionDetail.css';\r\nimport Seat from '../../../components/Seat/Seat'\r\nimport { Button } from 'primereact/button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {Checkbox} from 'primereact/checkbox';\r\nimport { Toast } from 'primereact/toast';\r\nimport { numberFormat } from \"../../utils/number\";\r\n\r\nfunction UserSessionDetail() {\r\n    const toast = useRef(null);\r\n    const history = useHistory();\r\n    const { promiseInProgress } = usePromiseTracker();\r\n    const params = useParams();\r\n    const [data, setData] = useState({});\r\n    const [dataUser, setDataUser] = useState({});\r\n    const [selectedSeat, setSelectedSeat] = useState([]);\r\n    const [row, setRow] = useState([]);\r\n    const colum = [1,2,3,4,5,6,7,8,9,10];\r\n    const [typePayment, setTypePayment] = useState(true);\r\n    const [isShowing, setIsShowing] = useState(true);\r\n    \r\n\r\n    useEffect(() => {\r\n        setSelectedSeat([]);\r\n        trackPromise(API.get('/api/public/session/'+params.id))\r\n        .then((res) =>{\r\n            if(res.data.ok){\r\n                setData(res.data.data[0]);    \r\n                let r = [];\r\n                for(let i = 1; i<=res.data.data[0].cinema.numberSeats/10;i++)\r\n                    r.push(i);\r\n                setRow(r);\r\n                let showTime = new Date(res.data.data[0].showTime);\r\n                if(showTime >= new Date()){\r\n                    setIsShowing(true);\r\n                }else{\r\n                    setIsShowing(false);\r\n                }\r\n            }else{\r\n                setIsShowing(false);\r\n            }\r\n            \r\n        })\r\n\r\n        API.post('/api/user/customer/username', {username:localStorage.getItem('username')}, \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n        .then((res) =>{\r\n            setDataUser(res.data.data[0]);\r\n        })\r\n        .catch((error)=>{\r\n            if(error.response.status === 401){\r\n                history.push(\"/login\");\r\n            }\r\n        });\r\n             \r\n    }, [params.id])\r\n\r\n    const onAddSeat = (id) =>{\r\n        const seats = [...selectedSeat];\r\n        seats.push(id);\r\n        setSelectedSeat(seats);\r\n    }\r\n\r\n    const onRemoveSeat = (id) =>{\r\n        const seats = [...selectedSeat];\r\n        seats.splice(seats.indexOf(id), 1);\r\n        setSelectedSeat(seats);\r\n    }\r\n\r\n    const renderSeatItem = (row) =>{\r\n        return(<>\r\n            {colum.map((ele,index)=>{\r\n                return <Seat labelIndex={(row-1)*10+ele} key={index} onAddSeat={onAddSeat} onRemoveSeat={onRemoveSeat} status={data.lstTicket.indexOf((row-1)*10+ele) == -1 ? 0 : 2}/>\r\n            })}\r\n        </>);\r\n    }\r\n\r\n    const renderSeat = () =>{\r\n        return(\r\n            <>\r\n                {row.map((ele, index)=>{\r\n                    return(\r\n                        <div className='p-grid p-col-12 p-mt-2' style={{justifyContent:'center'}} key={index}>\r\n                            <h2 className=\"p-mr-2\">{ele}</h2>\r\n                            {renderSeatItem(ele)}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n    const renderNameSeat = () =>{\r\n        return(<>\r\n            {selectedSeat.map((ele,index)=>{\r\n                return (index > 0 ? ',':'')+ele;\r\n            })}\r\n        </>);\r\n    }\r\n\r\n    \r\n\r\n   \r\n    const  onBookTickets = () =>{\r\n        if(selectedSeat.length < 1)\r\n        {\r\n            toast.current.show({severity:'warn', summary: 'Thông báo', detail: 'Bạn chưa chọn ghế', life: 3000});\r\n            return;\r\n        }    \r\n        let body = {\r\n            paymentType : typePayment ? 0 : 1,\r\n            customerId: dataUser.id,\r\n            sessionId: data.id,\r\n            tickets : selectedSeat\r\n        }\r\n\r\n        API.post('/api/user/receipt', body, \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                if(res.data.ok){\r\n                    toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    setTimeout(() => { history.push(\"/user/account/receipt\"); }, 3000);\r\n                    \r\n                }else{\r\n                    toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n                toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n        });\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"body-container\">\r\n            <Header/>   \r\n            {\r\n                promiseInProgress ? <h2>Loading</h2> : \r\n                (\r\n                    isShowing ?\r\n                    (\r\n                    <><Toast ref={toast} />\r\n                    <div className=\"p-grid\">\r\n                        <div className =\"p-col-12 p-sm-7\">\r\n                            <div className=\"p-grid p-col-12\" style={{justifyContent:'center'}}>\r\n                                <div class=\"block\">\r\n                                    <hr />\r\n                                        <div class=\"text\">Màn hình</div>\r\n                                    <hr />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-grid p-col-12\" style={{justifyContent:'center'}}>\r\n                                {renderSeat()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-col-12 p-sm-5\" style={{backgroundColor:'white', color:'black'}}>\r\n                            <div className=\"p-grid\" style={{justifyContent:'center'}}><h2>Thông tin hoá đơn</h2></div>\r\n                            <div className=\"p-grid p-col-12\">\r\n                                <div className=\"p-col-6\">\r\n                                    Họ Tên: {dataUser?.fullName}\r\n                                </div>\r\n                                <div className=\"p-col-6\">\r\n                                    Số điện thoại: {dataUser?.phone}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-grid p-col-12\">\r\n                                <div className=\"p-col-6\">\r\n                                    Tên phim: {data?.movie?.name}\r\n                                </div>\r\n                                <div className=\"p-col-6\">\r\n                                    Ngày giờ: {toDateTString(data?.showTime)}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-grid p-col-12\">\r\n                                <div className=\"p-col-6\">\r\n                                    Rạp số: {data?.cinema?.name}\r\n                                </div>\r\n                                <div className=\"p-col-6\">\r\n                                    Loại rạp: {data?.cinema?.type} - {data?.cinema?.numberSeats}\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div className=\"p-grid p-col-12\" >\r\n                                <div className=\"p-col-12\">\r\n                                    Ghế: <>{renderNameSeat()}</>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-grid p-col-12\" >\r\n                                <div className=\"p-col-6\">\r\n                                    Số lượng vé: {selectedSeat.length}\r\n                                </div>\r\n                                <div className=\"p-col-6\">\r\n                                    Thành tiền: {numberFormat((selectedSeat.length)*data?.cinema?.price)}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"p-grid p-col-12\">\r\n                                <div className=\"p-col-3\">\r\n                                    Thanh toán: \r\n                                </div>\r\n                                <div className=\"p-col-4\">\r\n                                    <Checkbox  onChange={() => setTypePayment(true)} checked={typePayment}></Checkbox>\r\n                                    Tiền mặt khi nhận vé\r\n                                    \r\n                                </div>\r\n                                <div className=\"p-col-4\">\r\n                                    <Checkbox  onChange={() => setTypePayment(false)} checked={!typePayment}></Checkbox>\r\n                                    Qua thẻ\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div className=\"p-grid\" style={{justifyContent:'center'}}>\r\n                                <Button label=\"Đặt vé\" className=\"p-button-rounded p-button-success\" onClick={onBookTickets}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </>)\r\n                    :\r\n                    <h2 style={{textAlign:'center'}}>Suất chiếu đã qua hoặc không tồn tại</h2>\r\n                )\r\n\r\n            }       \r\n            <Footer/>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default UserSessionDetail\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\components\\Seat\\Seat.js",["235","236","237","238","239","240","241","242"],"import { useState,useEffect,useRef } from 'react';\r\nimport { Button } from 'primereact/button';\r\n\r\nconst Seat = (props) => {\r\n    const[status, setStatus] = useState(0);\r\n    \r\n    const onClick = () =>{    \r\n        if(status == 0) {\r\n            setStatus(1);\r\n            props.onAddSeat(props.labelIndex);\r\n        }\r\n        else if(status == 1) {\r\n            setStatus(0);\r\n            props.onRemoveSeat(props.labelIndex);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [])\r\n\r\n    const getColorByStatus = () =>{\r\n        if(status == 0)\r\n            return 'p-mr-1 p-button-info  p-button-outlined';\r\n        else if(status == 1)\r\n            return 'p-mr-1 p-button-info ';\r\n        else if(status == 2)\r\n            return 'p-mr-1 p-button-raised p-button-secondary';\r\n    }\r\n\r\n    const onTouch = () =>{\r\n        setStatus(1);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button label={props.labelIndex} className={getColorByStatus()}  onClick={onClick} style={{width:'50px'}} disabled={status == 2 ? true : false} onTouchMove={onTouch}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Seat\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\AccountDetail\\AccountDetail.js",["243","244","245","246","247"],"import Header from '../../Header/Header';\r\nimport Footer from '../../../components/Footer/Footer';\r\nimport { Button } from 'primereact/button';\r\nimport AccountDetailPage from '../AccountDetailPage/AccountDetailPage';\r\nimport AccountSessionPage from '../AccountSessionPage/AccountSessionPage';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { useFormik } from 'formik';\r\nimport API from '../../utils/request';\r\nimport { Password } from 'primereact/password';\r\n\r\n\r\nfunction AccountDetail(props) {\r\n    const history = useHistory();\r\n    const [status, setStatus] = useState(0);\r\n    const [displayModal,setDisplayModal] = useState(false);\r\n    const toast = useRef(null);\r\n    const [password, setPassword] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const logout = () => {\r\n        localStorage.clear();\r\n        setTimeout(() => { history.push(\"/login\"); }, 3000);\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id : localStorage.getItem(\"id\"),\r\n            password : '',\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if (!data.password || password == null) {\r\n                errors.password = 'Password không được để trống';\r\n                return errors;\r\n            }\r\n            if (data.password.trim() != password.trim()) {\r\n                errors.password = 'Password và Password nhập lại chưa giống';\r\n                return errors;\r\n            }\r\n            \r\n        },\r\n        onSubmit: (data) => {\r\n            API.post('/api/user/customer/password', data, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    if(res.data.ok){\r\n                        toast.current.show({severity:'success', summary: 'Thông báo', detail: \"Đổi mật khẩu thành công, 3s sau sẽ tự động đăng xuất\", life: 3000});\r\n                        setDisplayModal(false);\r\n                        logout();\r\n                    }else{\r\n                        toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }\r\n                    \r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error);\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n    });\r\n\r\n    const footer = (\r\n        <div>\r\n            <Button label={'Cập nhật'} icon=\"pi pi-check\" onClick={formik.handleSubmit}/>\r\n            <Button label=\"Huỷ\" icon=\"pi pi-times\" onClick={() =>{setDisplayModal(false);setPassword(null);formik.setFieldValue('password' , '');}}/>\r\n        </div>\r\n    );\r\n    \r\n    return (\r\n        <div className=\"body-container\">\r\n            <Header/>\r\n            <Toast ref={toast} />\r\n            <div className=\"p-grid\">\r\n                <div className=\"p-col-12 p-sm-2 p-md-2\"/>\r\n                <div className=\"p-col-12 p-sm-1\">\r\n                    <div className=\"p-grid p-mb-3\"><Button icon=\"pi pi-user\" label=\"Thông tin\" onClick={() => history.push('/user/account/info')}\r\n                    className=\"p-button-rounded p-button-info\" style={{width:'100%'}}/></div>\r\n                    <div className=\"p-grid p-mb-3\"><Button icon=\"pi pi-wallet\" label=\"Hoá đơn\" onClick={() => history.push('/user/account/receipt')}\r\n                    className=\"p-button-rounded p-button-info\" style={{width:'100%'}}/></div>\r\n                    <div className=\"p-grid p-mb-3\"><Button icon=\"pi pi-key\" label=\"Đổi mật khẩu\" onClick={() => setDisplayModal(true)}\r\n                    className=\"p-button-rounded p-button-info\" style={{width:'100%'}}/></div>\r\n                </div>\r\n                <div className=\"p-col-12 p-sm-8 p-md-8\" >\r\n                    {status == 0 ? <AccountDetailPage/>:<AccountSessionPage/>}\r\n                </div>\r\n            </div>\r\n            <Dialog header={'Đổi mật khẩu'} onHide={() => {setDisplayModal(false);;setPassword(null);formik.setFieldValue('password' , '');}} visible={displayModal} footer={footer}  \r\n            breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n                <form onSubmit={formik.handleSubmit} className=\"p-fluid\">\r\n                    <div className=\"p-grid\">\r\n                        <div className=\"p-col-6\">\r\n                            <label htmlFor=\"password\" class=\"p-mb-2\">Password</label>\r\n                            <Password id=\"password\" name=\"password\" value={formik.values.password} onChange={formik.handleChange} toggleMask/>\r\n                            <small className=\"p-error p-d-block\">{formik.touched.password? formik.errors.password: ''}</small>\r\n                        </div>\r\n                        <div className=\"p-col-6\">\r\n                            <label htmlFor=\"passwordA\" class=\"p-mb-2\">Nhập lại Password</label>\r\n                            <Password id=\"passwordA\" name=\"passwordA\"  value={password} onChange={(e) => setPassword(e.target.value)} toggleMask />\r\n                            <small className=\"p-error p-d-block\">{formik.touched.password? formik.errors.password: ''}</small>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </Dialog>\r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountDetail\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\AccountDetailPage\\AccountDetailPage.js",["248","249","250"],"import React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../../utils/request'\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { useFormik } from 'formik';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport {Password} from 'primereact/password';\r\nimport {Checkbox} from 'primereact/checkbox';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nfunction AccountDetailPage() {\r\n    const [sex, setSex] = useState(true);\r\n    const history = useHistory();\r\n    const toast = useRef(null);\r\n\r\n    useEffect(() => {\r\n        reloadDataUser();\r\n    }, []);\r\n\r\n    const reloadDataUser = () =>{\r\n        API.post('/api/user/customer/username', {username:localStorage.getItem('username')}, \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n        .then((res) =>{\r\n            let data = res.data.data[0];\r\n            formik.setFieldValue('id' , data.id);\r\n            formik.setFieldValue('email' , data.email);\r\n            formik.setFieldValue('fullName' , data.fullName);\r\n            setSex(data.sex);\r\n            formik.setFieldValue('phone' , data.phone);\r\n            formik.setFieldValue('address' , data.address);\r\n        })\r\n        .catch((error)=>{\r\n            if(error.response.status === 401){\r\n                history.push(\"/login\");\r\n            }\r\n        });\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: '',\r\n            email : '',\r\n            fullName : '',\r\n            sex : '',\r\n            phone : '',\r\n            address : '',\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            \r\n            if(!data.fullName.trim()){\r\n                errors.fullName = 'Họ tên không được để trống';\r\n            }\r\n            if(!data.phone.trim()){\r\n                errors.phone = 'Số điện thoại không được để trống';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            data.sex = sex;\r\n            API.post('/api/user/customer/info', data, \r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n                }})\r\n                    .then((res) =>{\r\n                        if(res.data.ok){\r\n                            toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                            reloadDataUser();\r\n                        }else{\r\n                            toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                        }\r\n                        \r\n                    })\r\n                    .catch((error)=>{\r\n                        console.log(error);\r\n                        toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n                });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n        <Toast ref={toast} />\r\n        <div className=\"p-mb-4\" style={{textAlign:'center'}}><h2>Thông tin cá nhân</h2></div>\r\n        <form onSubmit={formik.handleSubmit} className=\"p-fluid\" style={{backgroundColor:'white', color:'black'}}>\r\n            <div className=\"p-grid p-col-12\">\r\n                <div className=\"p-col-6\">\r\n                    <label htmlFor=\"username\" class=\"p-mb-2\">Username</label>\r\n                    <InputText id=\"username\" value={localStorage.getItem('username')}  autoFocus disabled={true}/>\r\n                </div>\r\n                <div className=\"p-col-6\">\r\n                    <label htmlFor=\"email\" class=\"p-mb-2\">Email</label>\r\n                    <InputText id=\"email\" value={formik.values.email} onChange={formik.handleChange} autoFocus />\r\n                    <small className=\"p-error p-d-block\">{formik.touched.email? formik.errors.email: ''}</small>\r\n                </div>\r\n            </div>\r\n            <div className=\"p-grid p-col-12\">\r\n                <div className=\"p-col-6\">\r\n                    <label htmlFor=\"fullName\" class=\"p-mb-2\">Họ tên</label>\r\n                    <InputText id=\"fullName\" value={formik.values.fullName} onChange={formik.handleChange} autoFocus />\r\n                    <small className=\"p-error p-d-block\">{formik.touched.fullName? formik.errors.fullName: ''}</small>\r\n                </div>\r\n                <div className=\"p-col-6\">\r\n                    <label htmlFor=\"phone\" class=\"p-mb-2\">Số điện thoại</label>\r\n                    <InputText id=\"phone\" value={formik.values.phone} onChange={formik.handleChange} keyfilter=\"num\" autoFocus maxLength={10} minLength={6}/>\r\n                    <small className=\"p-error p-d-block\">{formik.touched.phone? formik.errors.phone: ''}</small>\r\n                </div>\r\n            </div>\r\n            <div className=\"p-grid p-col-12\">\r\n                <div className=\"p-col-6\">\r\n                    <div className=\"p-grid p-mt-3\">\r\n                        <div className=\"p-col-6\">\r\n                            Giới tính:\r\n                            <Checkbox  id=\"sex\" onChange={() => setSex(true)} checked={sex} className=\"p-ml-2\"></Checkbox>\r\n                            <label htmlFor=\"sex\" className=\"p-checkbox-label\">Nam</label>\r\n                        </div>\r\n                        <div className=\"p-col-6\">\r\n                            <Checkbox  id=\"sex\" onChange={() => setSex(false)} checked={!sex}></Checkbox>\r\n                            <label htmlFor=\"sex\" className=\"p-checkbox-label\">Nữ</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-col-6\">\r\n                    \r\n                        <label htmlFor=\"address\" class=\"p-mb-2\">Địa chỉ</label>\r\n                        <InputTextarea value={formik.values.address}\r\n                        id=\"address\" \r\n                        onChange={formik.handleChange}\r\n                        rows={2} cols={30} autoResize />\r\n                    \r\n                </div>\r\n                <div className=\"p-grid p-col-12\" style={{textAlign:'center'}}>\r\n                    <div className=\"p-col-12\" >\r\n                     <Button label=\"Cập nhật\" className=\"p-button-raised p-button-success\" style={{width: '200px'}} onClick={formik.handleSubmit}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountDetailPage\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\User\\AccountSessionPage\\AccountSessionPage.js",["251"],"import { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport React, { useState,useEffect } from 'react';\r\nimport API from '../../utils/request';\r\nimport { toDateTString } from \"../../utils/date\";\r\nimport {numberFormat} from '../../utils/number';\r\nimport { Button } from 'primereact/button';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport QRCode from 'qrcode.react';\r\n\r\nfunction AccountSessionPage() {\r\n    const [data, setData] = useState([]);\r\n    const [selectedRow, setSelectedRow] = useState({});\r\n    const [displayModal, setDisplayModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        API.get('/api/user/receipt/'+localStorage.getItem('id'), \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                setData(res.data.data);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n        setSelectedRow({});\r\n    }, []);\r\n\r\n    const setSelectedRowCustomize = (e) => {\r\n        setSelectedRow(e.value);\r\n    };\r\n\r\n    const renderTotal = (rowData) =>{\r\n        return numberFormat(rowData.cinemaPrice * rowData.tickets.length);\r\n    }\r\n\r\n    const showDetailReceipt = (rowData) =>{\r\n        setSelectedRow({...rowData})\r\n        setDisplayModal(true);\r\n    }\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <Button type=\"button\" label=\"Chi tiết\" \r\n            onClick={(rowData) => showDetailReceipt(rowData)} className=\"p-button-rounded p-button-help\"></Button>\r\n        );\r\n    }\r\n\r\n    const renderNameSeat = () =>{\r\n        return(<>\r\n            {selectedRow.tickets?.map((ele,index)=>{\r\n                return (index > 0 ? ',':'')+ele;\r\n            })}\r\n        </>);\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign:'center'}}>\r\n            <div className=\"p-mb-4\"><h2>Thông tin hoá đơn</h2></div>\r\n            <Dialog header={'Chi tiết hoá đơn'} onHide={() => setDisplayModal(false)} visible={displayModal} \r\n            breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n            \r\n                <div className=\"p-grid p-col-12\">\r\n                    <div className=\"p-col-6\">\r\n                        Tên phim: {selectedRow?.movieName}\r\n                    </div>\r\n                    <div className=\"p-col-6\">\r\n                        Ngày giờ: {toDateTString(selectedRow?.showTime)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-grid p-col-12\">\r\n                    <div className=\"p-col-6\">\r\n                        Rạp số: {selectedRow?.cinemaName}\r\n                    </div>\r\n                    <div className=\"p-col-6\">\r\n                        Loại rạp: {selectedRow?.cinemaType}\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-grid p-col-12\" >\r\n                    <div className=\"p-col-12\">\r\n                        Ghế: <>{renderNameSeat()}</>\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-grid p-col-12\" >\r\n                    <div className=\"p-col-6\">\r\n                        Số lượng vé: {selectedRow?.tickets?.length}\r\n                    </div>\r\n                    <div className=\"p-col-6\">\r\n                        Thành tiền: {numberFormat(selectedRow?.cinemaPrice * selectedRow?.tickets?.length)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-gird p-col-12\">\r\n                    Thanh toán: {selectedRow?.paymentType == 0 ? 'Tiền mặt khi nhận vé' : 'Qua thẻ'}\r\n                    \r\n                </div>\r\n                <div className=\"p-grid p-col-12\"> \r\n                    <div className=\"p-col-6\">\r\n                        <label htmlFor=\"status\" className=\"p-mt-1\">Trạng thái</label>\r\n                        {selectedRow?.isGetTicket ? \r\n                        <Button label=\"ĐÃ LẤY\" id=\"status\" name=\"status\" className=\"p-button-success p-ml-2\" />:\r\n                        <Button label=\"CHƯA LẤY\" id=\"status\" name=\"status\" className=\"p-button-warning p-ml-2\" />}\r\n                    </div>     \r\n                    <div className=\"p-col-6\">\r\n                        <QRCode value={selectedRow?.id+''} />\r\n                    </div>               \r\n                </div>\r\n            </Dialog>\r\n            <div className=\"card\">\r\n                <DataTable value={data} paginator rows={10}\r\n                    selection={selectedRow} \r\n                    onSelectionChange={setSelectedRowCustomize} \r\n                    selectionMode=\"single\" \r\n                    dataKey=\"id\"\r\n                    stateStorage=\"local\" \r\n                    stateKey=\"dt-state-demo-local\"\r\n                    emptyMessage=\"Không có hoá đơn\">\r\n                    <Column field=\"movieName\" header=\"Tên phim\" sortable ></Column>\r\n                    <Column field=\"cinemaName\" header=\"Rạp số\" sortable ></Column>\r\n                    <Column field=\"cinemaType\" header=\"Loại rạp\" sortable ></Column>\r\n                    <Column field=\"showTime\" header=\"Ngày giờ chiếu\" body={(rowData) => toDateTString(rowData.showTime)} sortable ></Column>\r\n                    <Column field=\"createdDate\" header=\"Ngày đặt\" body={(rowData) => toDateTString(rowData.createdDate)} sortable></Column>\r\n                    <Column field=\"price\" header=\"Tổng tiền\" body={(rowData) => renderTotal(rowData)} style={{right: '0px'}} sortable ></Column>\r\n                    <Column body={(rowData) => actionBodyTemplate(rowData)} headerStyle={{width: '8em', textAlign: 'center'}} bodyStyle={{textAlign: 'center', overflow: 'visible'}} />\r\n                </DataTable>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountSessionPage\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Register\\Register.js",["252","253"],"import { Panel } from 'primereact/panel';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request'\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { useFormik } from 'formik';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport {Password} from 'primereact/password';\r\n\r\nimport {Checkbox} from 'primereact/checkbox';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Register() {\r\n    const toast = useRef(null);\r\n    const [sex, setSex] = useState(true);\r\n    const history = useHistory();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username : '',\r\n            password : '',\r\n            fullName : '',\r\n            name : '',\r\n            sex : '',\r\n            phone : '',\r\n            email :'',\r\n            address : ''\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if(!data.username.trim()){\r\n                errors.username = 'Username không được để trống';\r\n            }\r\n            if(!data.password.trim()){\r\n                errors.password = 'Password không được để trống';\r\n            }\r\n            if(!data.fullName.trim()){\r\n                errors.fullName = 'Họ tên không được để trống';\r\n            }\r\n            if(!data.phone.trim()){\r\n                errors.phone = 'Số điện thoại không được để trống';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            console.log(data);\r\n            data.sex = sex;\r\n            API.post('/api/auth/signup', data)\r\n            .then((res) =>{\r\n                if(res.data.ok){\r\n                    toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message+\", 3s sau sẽ được chuyển về trang đăng nhập\", life: 3000});\r\n                    setTimeout(() => { history.push(\"/login\"); }, 3000);\r\n                }else{\r\n                    toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }\r\n                \r\n            })\r\n            .catch((error)=>{\r\n                if(error.response.status === 400){\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail: error.response.data.message, life: 3000});\r\n                }else toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n        <Toast ref={toast} />\r\n        <div className=\"form\" style={{backgroundColor:\"black\"}}>\r\n            <div className=\"p-d-flex\">\r\n                <div className=\"card\">\r\n                    <h2 className=\"p-text-center\" style={{color:'white'}}>Đăng ký</h2>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\" style={{backgroundColor:\"white\", borderRadius: '5%'}}>\r\n                        <div className=\"p-grid p-col-12\">\r\n                            <div className=\"p-col-12\">\r\n                                <label htmlFor=\"username\" class=\"p-mb-2\">Username</label>\r\n                                <InputText id=\"username\" value={formik.values.username} onChange={formik.handleChange} autoFocus />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.username? formik.errors.username: ''}</small>\r\n                            </div>\r\n                            <div className=\"p-col-12\">\r\n                                <label htmlFor=\"password\" class=\"p-mb-2\">Password</label>\r\n                                <Password id=\"password\" name=\"password\" value={formik.values.password} onChange={formik.handleChange} toggleMask />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.password? formik.errors.password: ''}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid p-col-12\">\r\n                            <div className=\"p-col-12\">\r\n                                <label htmlFor=\"fullName\" class=\"p-mb-2\">Họ tên</label>\r\n                                <InputText id=\"fullName\" value={formik.values.fullName} onChange={formik.handleChange} autoFocus />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.fullName? formik.errors.fullName: ''}</small>\r\n                            </div>\r\n                            <div className=\"p-col-12\">\r\n                                <label htmlFor=\"phone\" class=\"p-mb-2\">Số điện thoại</label>\r\n                                <InputText id=\"phone\" value={formik.values.phone} onChange={formik.handleChange} keyfilter=\"num\" autoFocus maxLength={10} minLength={6}/>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.phone? formik.errors.phone: ''}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid p-col-12\">\r\n                            <div className=\"p-col-12\">\r\n                                <label htmlFor=\"email\" class=\"p-mb-2\">Email</label>\r\n                                <InputText id=\"email\" value={formik.values.email} onChange={formik.handleChange} autoFocus />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.email? formik.errors.email: ''}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid p-col-12\">\r\n                            <div className=\"p-grid p-col-12\">\r\n                                <div className=\"p-ml-1 p-mt-2\">Giới tính</div>\r\n                                <div className=\"p-col-3\">\r\n                                    <Checkbox  id=\"sex\" onChange={() => setSex(true)} checked={sex}></Checkbox>\r\n                                    <label htmlFor=\"sex\" className=\"p-checkbox-label\">Nam</label>\r\n                                </div>\r\n                                <div className=\"p-col-3\">\r\n                                    <Checkbox  id=\"sex\" onChange={() => setSex(false)} checked={!sex}></Checkbox>\r\n                                    <label htmlFor=\"sex\" className=\"p-checkbox-label\">Nữ</label>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div className=\"p-col-12\">\r\n                                    <label htmlFor=\"address\" class=\"p-mb-2\">Địa chỉ</label>\r\n                                    <InputTextarea value={formik.values.address}\r\n                                    id=\"address\" \r\n                                    onChange={formik.handleChange}\r\n                                    rows={2} cols={30} autoResize />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid p-col-12\" style={{justifyContent:'center'}}>\r\n                            <Button type=\"submit\" label=\"Đăng ký\" className=\"p-mt-2\" style={{width:'200px'}}/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Dashboard\\Dashboard.js",[],"P:\\Thuc-tap\\GreenMovie-V3.0\\frontend\\admin\\src\\containers\\Account\\Account.js",["254","255","256","257"],"import { Panel } from 'primereact/panel';\r\nimport React, { useState,useEffect,useRef } from 'react';\r\nimport API from '../utils/request'\r\nimport { Button } from 'primereact/button';\r\nimport { Toast } from 'primereact/toast';\r\nimport { useFormik } from 'formik';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport {Password} from 'primereact/password';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport {Checkbox} from 'primereact/checkbox';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Account() {\r\n    const [sex, setSex] = useState(true);\r\n    const history = useHistory();\r\n    const toast = useRef(null);\r\n    const [displayModal,setDisplayModal] = useState(false);\r\n    const [password, setPassword] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        API.get('/api/admin/staff/'+localStorage.getItem(\"id\"), \r\n        {\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }})\r\n            .then((res) =>{\r\n                let data = res.data.data[0];\r\n                formik.setFieldValue('id' , data.id);\r\n                formik.setFieldValue('fullName' , data.fullName);\r\n                formik.setFieldValue('username' , data.username);\r\n                setSex(data.sex);\r\n                formik.setFieldValue('phone' , data.phone);\r\n                formik.setFieldValue('address' , data.address);\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n        });\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id : '',\r\n            username : '',\r\n            fullName : '',\r\n            sex : '',\r\n            phone : '',\r\n            address : ''\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if(!data.fullName.trim()){\r\n                errors.fullName = 'Họ tên không được để trống';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            console.log(data);\r\n            data.sex = sex;\r\n            API.post('/api/admin/staff', data,{\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n            .then((res) =>{\r\n                if(res.data.ok){\r\n                    toast.current.show({severity:'success', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }else{\r\n                    toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                }\r\n                \r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n            });\r\n        }\r\n    });\r\n\r\n    const logout = () => {\r\n        localStorage.clear();\r\n        setTimeout(() => { window.location.href = \"/login\";; }, 3000);\r\n    }\r\n\r\n    const formikP = useFormik({\r\n        initialValues: {\r\n            id : localStorage.getItem(\"id\"),\r\n            password : '',\r\n        },\r\n        validate: (data) => {\r\n            const errors = {};\r\n            if (!data.password || password == null) {\r\n                errors.password = 'Password không được để trống';\r\n                return errors;\r\n            }\r\n            if (data.password.trim() != password.trim()) {\r\n                errors.password = 'Password và Password nhập lại chưa giống';\r\n                return errors;\r\n            }\r\n            \r\n        },\r\n        onSubmit: (data) => {\r\n            API.post('/api/admin/staff/password', data, \r\n            {\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }})\r\n                .then((res) =>{\r\n                    if(res.data.ok){\r\n                        toast.current.show({severity:'success', summary: 'Thông báo', detail: \"Đổi mật khẩu thành công, 3s sau sẽ tự động đăng xuất\", life: 3000});\r\n                        setDisplayModal(false);\r\n                        logout();\r\n                    }else{\r\n                        toast.current.show({severity:'warn', summary: 'Thông báo', detail: res.data.message, life: 3000});\r\n                    }\r\n                    \r\n                })\r\n                .catch((error)=>{\r\n                    console.log(error);\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống', life: 3000});\r\n            });\r\n        }\r\n    });\r\n\r\n    const footer = (\r\n        <div>\r\n            <Button label={'Cập nhật'} icon=\"pi pi-check\" onClick={formikP.handleSubmit}/>\r\n            <Button label=\"Huỷ\" icon=\"pi pi-times\" onClick={() =>{setDisplayModal(false);setPassword(null);formikP.setFieldValue('password' , '');}}/>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"p-grid p-col-12\">\r\n            <Toast ref={toast} />\r\n            <Dialog header={'Đổi mật khẩu'} onHide={() => {setDisplayModal(false);;setPassword(null);formikP.setFieldValue('password' , '');}} visible={displayModal} footer={footer}  \r\n            breakpoints={{'960px': '75vw', '640px': '100vw'}} style={{width: '50vw'}}>\r\n                <form onSubmit={formikP.handleSubmit} className=\"p-fluid\">\r\n                    <div className=\"p-grid\">\r\n                        <div className=\"p-col-6\">\r\n                            <label htmlFor=\"password\" class=\"p-mb-2\">Password</label>\r\n                            <Password id=\"password\" name=\"password\" value={formikP.values.password} onChange={formikP.handleChange} toggleMask/>\r\n                            <small className=\"p-error p-d-block\">{formikP.touched.password? formikP.errors.password: ''}</small>\r\n                        </div>\r\n                        <div className=\"p-col-6\">\r\n                            <label htmlFor=\"passwordA\" class=\"p-mb-2\">Nhập lại Password</label>\r\n                            <Password id=\"passwordA\" name=\"passwordA\"  value={password} onChange={(e) => setPassword(e.target.value)} toggleMask />\r\n                            <small className=\"p-error p-d-block\">{formikP.touched.password? formikP.errors.password: ''}</small>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </Dialog>\r\n            <div style={{display: 'flex', justifyContent: 'center', flex: 1}}>\r\n            <div className=\"card\">\r\n                    <h2 className=\"p-text-center\">Thông tin cá nhân</h2>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid p-col-12\" style={{}}>\r\n                        <div className=\"p-grid p-col-12\">\r\n                            <div className=\"p-col-12\">\r\n                                <label htmlFor=\"username\" class=\"p-mb-2\">Username</label>\r\n                                <InputText id=\"username\" value={formik.values.username} onChange={formik.handleChange} autoFocus disabled={true}/>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.username? formik.errors.username: ''}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid p-col-12\">\r\n                            <div className=\"p-col-12\">\r\n                                <label htmlFor=\"fullName\" class=\"p-mb-2\">Họ tên</label>\r\n                                <InputText id=\"fullName\" value={formik.values.fullName} onChange={formik.handleChange} autoFocus />\r\n                                <small className=\"p-error p-d-block\">{formik.touched.fullName? formik.errors.fullName: ''}</small>\r\n                            </div>\r\n                            <div className=\"p-col-12\">\r\n                                <label htmlFor=\"phone\" class=\"p-mb-2\">Số điện thoại</label>\r\n                                <InputText id=\"phone\" value={formik.values.phone} onChange={formik.handleChange} keyfilter=\"num\" autoFocus maxLength={10} minLength={6}/>\r\n                                <small className=\"p-error p-d-block\">{formik.touched.phone? formik.errors.phone: ''}</small>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid p-col-12\">\r\n                            <div className=\"p-grid p-col-12\">\r\n                                <div className=\"p-ml-1 p-mt-2\">Giới tính</div>\r\n                                <div className=\"p-col-3\">\r\n                                    <Checkbox  id=\"sex\" onChange={() => setSex(true)} checked={sex}></Checkbox>\r\n                                    <label htmlFor=\"sex\" className=\"p-checkbox-label\">Nam</label>\r\n                                </div>\r\n                                <div className=\"p-col-3\">\r\n                                    <Checkbox  id=\"sex\" onChange={() => setSex(false)} checked={!sex}></Checkbox>\r\n                                    <label htmlFor=\"sex\" className=\"p-checkbox-label\">Nữ</label>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div className=\"p-col-12\">\r\n                                    <label htmlFor=\"address\" class=\"p-mb-2\">Địa chỉ</label>\r\n                                    <InputTextarea value={formik.values.address}\r\n                                    id=\"address\" \r\n                                    onChange={formik.handleChange}\r\n                                    rows={2} cols={30} autoResize />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-grid p-col-12\" style={{justifyContent:'center'}}>\r\n                            <Button type=\"submit\" label=\"Cập nhật\" className=\"p-mt-2 p-button-rounded p-button-success\" style={{width:'200px'}} onClick={formik.handleSubmit}/>\r\n                        </div>\r\n                        <div className=\"p-grid p-col-12\" style={{justifyContent:'center'}}>\r\n                            <Button type=\"button\" label=\"Đổi mật khẩu\" className=\"p-mt-2 p-button-rounded p-button-danger\" style={{width:'200px'}} onClick={() => setDisplayModal(true)}/>\r\n                        </div>\r\n                    </form>\r\n                </div>  \r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account\r\n",{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":9,"column":50,"nodeType":"264","messageId":"265","endLine":9,"endColumn":60},{"ruleId":"262","severity":1,"message":"266","line":18,"column":10,"nodeType":"264","messageId":"265","endLine":18,"endColumn":17},{"ruleId":"262","severity":1,"message":"267","line":19,"column":10,"nodeType":"264","messageId":"265","endLine":19,"endColumn":17},{"ruleId":"262","severity":1,"message":"268","line":19,"column":19,"nodeType":"264","messageId":"265","endLine":19,"endColumn":29},{"ruleId":"269","severity":1,"message":"270","line":28,"column":7,"nodeType":"271","endLine":28,"endColumn":36},{"ruleId":"269","severity":1,"message":"272","line":50,"column":8,"nodeType":"273","endLine":50,"endColumn":10,"suggestions":"274"},{"ruleId":"262","severity":1,"message":"275","line":8,"column":8,"nodeType":"264","messageId":"265","endLine":8,"endColumn":13},{"ruleId":"262","severity":1,"message":"276","line":9,"column":10,"nodeType":"264","messageId":"265","endLine":9,"endColumn":18},{"ruleId":"262","severity":1,"message":"277","line":14,"column":12,"nodeType":"264","messageId":"265","endLine":14,"endColumn":20},{"ruleId":"262","severity":1,"message":"278","line":12,"column":11,"nodeType":"264","messageId":"265","endLine":12,"endColumn":18},{"ruleId":"279","severity":1,"message":"280","line":32,"column":25,"nodeType":"281","endLine":32,"endColumn":78},{"ruleId":"282","severity":1,"message":"283","line":16,"column":57,"nodeType":"284","messageId":"285","endLine":16,"endColumn":80,"fix":"286"},{"ruleId":"262","severity":1,"message":"287","line":7,"column":10,"nodeType":"264","messageId":"265","endLine":7,"endColumn":22},{"ruleId":"269","severity":1,"message":"288","line":34,"column":8,"nodeType":"273","endLine":34,"endColumn":10,"suggestions":"289"},{"ruleId":"262","severity":1,"message":"287","line":7,"column":10,"nodeType":"264","messageId":"265","endLine":7,"endColumn":22},{"ruleId":"262","severity":1,"message":"290","line":16,"column":10,"nodeType":"264","messageId":"265","endLine":16,"endColumn":18},{"ruleId":"262","severity":1,"message":"291","line":17,"column":10,"nodeType":"264","messageId":"265","endLine":17,"endColumn":21},{"ruleId":"262","severity":1,"message":"292","line":18,"column":10,"nodeType":"264","messageId":"265","endLine":18,"endColumn":19},{"ruleId":"262","severity":1,"message":"293","line":19,"column":10,"nodeType":"264","messageId":"265","endLine":19,"endColumn":20},{"ruleId":"294","severity":1,"message":"295","line":51,"column":38,"nodeType":"296","messageId":"297","endLine":51,"endColumn":40},{"ruleId":"294","severity":1,"message":"295","line":57,"column":37,"nodeType":"296","messageId":"297","endLine":57,"endColumn":39},{"ruleId":"262","severity":1,"message":"287","line":7,"column":10,"nodeType":"264","messageId":"265","endLine":7,"endColumn":22},{"ruleId":"262","severity":1,"message":"298","line":19,"column":12,"nodeType":"264","messageId":"265","endLine":19,"endColumn":26},{"ruleId":"262","severity":1,"message":"299","line":19,"column":28,"nodeType":"264","messageId":"265","endLine":19,"endColumn":45},{"ruleId":"262","severity":1,"message":"300","line":23,"column":12,"nodeType":"264","messageId":"265","endLine":23,"endColumn":19},{"ruleId":"262","severity":1,"message":"301","line":23,"column":21,"nodeType":"264","messageId":"265","endLine":23,"endColumn":31},{"ruleId":"294","severity":1,"message":"295","line":84,"column":33,"nodeType":"296","messageId":"297","endLine":84,"endColumn":35},{"ruleId":"294","severity":1,"message":"295","line":102,"column":30,"nodeType":"296","messageId":"297","endLine":102,"endColumn":32},{"ruleId":"262","severity":1,"message":"302","line":170,"column":11,"nodeType":"264","messageId":"265","endLine":170,"endColumn":30},{"ruleId":"303","severity":1,"message":"304","line":73,"column":43,"nodeType":"305","messageId":"306","endLine":73,"endColumn":44,"suggestions":"307"},{"ruleId":"303","severity":1,"message":"304","line":73,"column":66,"nodeType":"305","messageId":"306","endLine":73,"endColumn":67,"suggestions":"308"},{"ruleId":"262","severity":1,"message":"302","line":142,"column":11,"nodeType":"264","messageId":"265","endLine":142,"endColumn":30},{"ruleId":"262","severity":1,"message":"309","line":5,"column":10,"nodeType":"264","messageId":"265","endLine":5,"endColumn":16},{"ruleId":"269","severity":1,"message":"310","line":47,"column":8,"nodeType":"273","endLine":47,"endColumn":15,"suggestions":"311"},{"ruleId":"262","severity":1,"message":"312","line":8,"column":10,"nodeType":"264","messageId":"265","endLine":8,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":17,"column":46,"nodeType":"296","messageId":"297","endLine":17,"endColumn":48},{"ruleId":"294","severity":1,"message":"295","line":19,"column":51,"nodeType":"296","messageId":"297","endLine":19,"endColumn":53},{"ruleId":"269","severity":1,"message":"272","line":31,"column":8,"nodeType":"273","endLine":31,"endColumn":10,"suggestions":"313"},{"ruleId":"262","severity":1,"message":"312","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":16},{"ruleId":"279","severity":1,"message":"280","line":10,"column":17,"nodeType":"281","endLine":10,"endColumn":79},{"ruleId":"314","severity":1,"message":"315","line":11,"column":29,"nodeType":"281","endLine":11,"endColumn":41},{"ruleId":"314","severity":1,"message":"315","line":12,"column":29,"nodeType":"281","endLine":12,"endColumn":41},{"ruleId":"314","severity":1,"message":"315","line":13,"column":29,"nodeType":"281","endLine":13,"endColumn":41},{"ruleId":"314","severity":1,"message":"315","line":14,"column":29,"nodeType":"281","endLine":14,"endColumn":41},{"ruleId":"314","severity":1,"message":"315","line":20,"column":33,"nodeType":"281","endLine":20,"endColumn":45},{"ruleId":"314","severity":1,"message":"315","line":27,"column":33,"nodeType":"281","endLine":27,"endColumn":45},{"ruleId":"314","severity":1,"message":"315","line":28,"column":33,"nodeType":"281","endLine":28,"endColumn":45},{"ruleId":"314","severity":1,"message":"315","line":29,"column":33,"nodeType":"281","endLine":29,"endColumn":45},{"ruleId":"262","severity":1,"message":"316","line":5,"column":29,"nodeType":"264","messageId":"265","endLine":5,"endColumn":35},{"ruleId":"294","severity":1,"message":"295","line":44,"column":42,"nodeType":"296","messageId":"297","endLine":44,"endColumn":44},{"ruleId":"279","severity":1,"message":"280","line":51,"column":37,"nodeType":"281","endLine":56,"endColumn":76},{"ruleId":"317","severity":1,"message":"318","line":55,"column":45,"nodeType":"319","messageId":"297","endLine":55,"endColumn":59},{"ruleId":"317","severity":1,"message":"318","line":56,"column":45,"nodeType":"319","messageId":"297","endLine":56,"endColumn":59},{"ruleId":"294","severity":1,"message":"295","line":59,"column":149,"nodeType":"296","messageId":"297","endLine":59,"endColumn":151},{"ruleId":"294","severity":1,"message":"295","line":61,"column":54,"nodeType":"296","messageId":"297","endLine":61,"endColumn":56},{"ruleId":"262","severity":1,"message":"316","line":4,"column":29,"nodeType":"264","messageId":"265","endLine":4,"endColumn":35},{"ruleId":"269","severity":1,"message":"272","line":42,"column":8,"nodeType":"273","endLine":42,"endColumn":10,"suggestions":"320"},{"ruleId":"294","severity":1,"message":"295","line":47,"column":24,"nodeType":"296","messageId":"297","endLine":47,"endColumn":26},{"ruleId":"294","severity":1,"message":"295","line":50,"column":22,"nodeType":"296","messageId":"297","endLine":50,"endColumn":24},{"ruleId":"294","severity":1,"message":"295","line":55,"column":33,"nodeType":"296","messageId":"297","endLine":55,"endColumn":35},{"ruleId":"269","severity":1,"message":"321","line":71,"column":8,"nodeType":"273","endLine":71,"endColumn":15,"suggestions":"322"},{"ruleId":"294","severity":1,"message":"295","line":86,"column":39,"nodeType":"296","messageId":"297","endLine":86,"endColumn":41},{"ruleId":"294","severity":1,"message":"295","line":110,"column":90,"nodeType":"296","messageId":"297","endLine":110,"endColumn":92},{"ruleId":"294","severity":1,"message":"295","line":136,"column":34,"nodeType":"296","messageId":"297","endLine":136,"endColumn":36},{"ruleId":"269","severity":1,"message":"272","line":66,"column":8,"nodeType":"273","endLine":66,"endColumn":19,"suggestions":"323"},{"ruleId":"294","severity":1,"message":"295","line":83,"column":167,"nodeType":"296","messageId":"297","endLine":83,"endColumn":169},{"ruleId":"262","severity":1,"message":"316","line":1,"column":29,"nodeType":"264","messageId":"265","endLine":1,"endColumn":35},{"ruleId":"294","severity":1,"message":"295","line":8,"column":19,"nodeType":"296","messageId":"297","endLine":8,"endColumn":21},{"ruleId":"294","severity":1,"message":"295","line":12,"column":24,"nodeType":"296","messageId":"297","endLine":12,"endColumn":26},{"ruleId":"269","severity":1,"message":"324","line":20,"column":8,"nodeType":"273","endLine":20,"endColumn":10,"suggestions":"325"},{"ruleId":"294","severity":1,"message":"295","line":23,"column":19,"nodeType":"296","messageId":"297","endLine":23,"endColumn":21},{"ruleId":"294","severity":1,"message":"295","line":25,"column":24,"nodeType":"296","messageId":"297","endLine":25,"endColumn":26},{"ruleId":"294","severity":1,"message":"295","line":27,"column":24,"nodeType":"296","messageId":"297","endLine":27,"endColumn":26},{"ruleId":"294","severity":1,"message":"295","line":37,"column":136,"nodeType":"296","messageId":"297","endLine":37,"endColumn":138},{"ruleId":"262","severity":1,"message":"326","line":7,"column":22,"nodeType":"264","messageId":"265","endLine":7,"endColumn":28},{"ruleId":"262","severity":1,"message":"327","line":8,"column":5,"nodeType":"264","messageId":"265","endLine":8,"endColumn":11},{"ruleId":"262","severity":1,"message":"328","line":9,"column":5,"nodeType":"264","messageId":"265","endLine":9,"endColumn":10},{"ruleId":"294","severity":1,"message":"329","line":48,"column":38,"nodeType":"296","messageId":"297","endLine":48,"endColumn":40},{"ruleId":"294","severity":1,"message":"295","line":99,"column":29,"nodeType":"296","messageId":"297","endLine":99,"endColumn":31},{"ruleId":"262","severity":1,"message":"330","line":5,"column":10,"nodeType":"264","messageId":"265","endLine":5,"endColumn":23},{"ruleId":"262","severity":1,"message":"331","line":8,"column":9,"nodeType":"264","messageId":"265","endLine":8,"endColumn":17},{"ruleId":"269","severity":1,"message":"332","line":21,"column":8,"nodeType":"273","endLine":21,"endColumn":10,"suggestions":"333"},{"ruleId":"294","severity":1,"message":"295","line":95,"column":59,"nodeType":"296","messageId":"297","endLine":95,"endColumn":61},{"ruleId":"262","severity":1,"message":"334","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":15},{"ruleId":"262","severity":1,"message":"335","line":2,"column":26,"nodeType":"264","messageId":"265","endLine":2,"endColumn":35},{"ruleId":"262","severity":1,"message":"334","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":15},{"ruleId":"262","severity":1,"message":"278","line":16,"column":11,"nodeType":"264","messageId":"265","endLine":16,"endColumn":18},{"ruleId":"269","severity":1,"message":"336","line":40,"column":8,"nodeType":"273","endLine":40,"endColumn":10,"suggestions":"337"},{"ruleId":"294","severity":1,"message":"329","line":95,"column":38,"nodeType":"296","messageId":"297","endLine":95,"endColumn":40},"no-native-reassign",["338"],"no-negated-in-lhs",["339"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'isLogin' is assigned a value but never used.","'isChose' is assigned a value but never used.","'setIsChose' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["340"],"'axios' is defined but never used.","'Redirect' is defined but never used.","'formData' is assigned a value but never used.","'history' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-computed-key","Unnecessarily computed property ['item-active'] found.","Property","unnecessarilyComputedProperty",{"range":"341","text":"342"},"'numberFormat' is defined but never used.","React Hook useEffect has a missing dependency: 'reloadData'. Either include it or remove the dependency array.",["343"],"'Dropdown' is defined but never used.","'InputNumber' is defined but never used.","'APPCONFIG' is defined but never used.","'FileUpload' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'listCategories' is assigned a value but never used.","'setListCategories' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","'getFormErrorMessage' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["344","345"],["346","347"],"'Avatar' is defined but never used.","React Hook useEffect has a missing dependency: 'slide.length'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setIndex' needs the current value of 'slide.length'.",["348"],"'Button' is defined but never used.",["349"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useRef' is defined but never used.","no-dupe-keys","Duplicate key 'imageRendering'.","ObjectExpression",["350"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["351"],["352"],"React Hook useEffect has a missing dependency: 'props.status'. Either include it or remove the dependency array. If 'setStatus' needs the current value of 'props.status', you can also switch to useReducer instead of useState and read 'props.status' in the reducer.",["353"],"'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","Expected '!==' and instead saw '!='.","'confirmDialog' is defined but never used.","'Password' is defined but never used.","React Hook useEffect has a missing dependency: 'reloadDataUser'. Either include it or remove the dependency array.",["354"],"'Panel' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.",["355"],"no-global-assign","no-unsafe-negation",{"desc":"356","fix":"357"},[587,602],"'item-active'",{"desc":"358","fix":"359"},{"messageId":"360","fix":"361","desc":"362"},{"messageId":"363","fix":"364","desc":"365"},{"messageId":"360","fix":"366","desc":"362"},{"messageId":"363","fix":"367","desc":"365"},{"desc":"368","fix":"369"},{"desc":"356","fix":"370"},{"desc":"356","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},"Update the dependencies array to be: [history]",{"range":"382","text":"383"},"Update the dependencies array to be: [reloadData]",{"range":"384","text":"385"},"removeEscape",{"range":"386","text":"387"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"388","text":"389"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"390","text":"387"},{"range":"391","text":"389"},"Update the dependencies array to be: [index, slide.length]",{"range":"392","text":"393"},{"range":"394","text":"383"},{"range":"395","text":"383"},"Update the dependencies array to be: [data, index]",{"range":"396","text":"397"},"Update the dependencies array to be: [history, params.id]",{"range":"398","text":"399"},"Update the dependencies array to be: [props.status]",{"range":"400","text":"401"},"Update the dependencies array to be: [reloadDataUser]",{"range":"402","text":"403"},"Update the dependencies array to be: [formik]",{"range":"404","text":"405"},[1465,1467],"[history]",[1422,1424],"[reloadData]",[2554,2555],"",[2554,2554],"\\",[2577,2578],[2577,2577],[1266,1273],"[index, slide.length]",[1111,1113],[1479,1481],[2416,2423],"[data, index]",[2430,2441],"[history, params.id]",[516,518],"[props.status]",[740,742],"[reloadDataUser]",[1555,1557],"[formik]"]