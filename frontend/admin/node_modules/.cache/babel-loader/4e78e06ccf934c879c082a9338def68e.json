{"ast":null,"code":"var _jsxFileName = \"P:\\\\Thuc-tap\\\\GreenMovie-V3.0\\\\frontend\\\\admin\\\\src\\\\containers\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { useFormik } from 'formik';\nimport './Login.css';\nimport { Toast } from 'primereact/toast';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  const [formData, setFormData] = useState({});\n  const toast = useRef(null);\n  const formik = useFormik({\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validate: data => {\n      let errors = {};\n\n      if (!data.username) {\n        errors.username = 'Username không được để trống.';\n      }\n\n      if (!data.password) {\n        errors.password = 'Password không được để trống';\n      }\n\n      return errors;\n    },\n    onSubmit: data => {\n      setFormData(data);\n      formik.resetForm();\n      axios.post('http://localhost:8080/api/auth/signin', data).then(res => {\n        console.log(res.data);\n\n        /*#__PURE__*/\n        _jsxDEV(Route, {\n          exact: true,\n          path: route\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this);\n      }).catch(error => {\n        console.log(error.status);\n\n        if (error.status === 401) {\n          toast.current.show({\n            severity: 'error',\n            summary: 'Thông báo',\n            detail: 'Username hoặc Password không đúng',\n            life: 3000\n          });\n        } else {\n          toast.current.show({\n            severity: 'error',\n            summary: 'Thông báo',\n            detail: 'Lỗi hệ thống đăng nhập lại',\n            life: 3000\n          });\n        }\n      });\n    }\n  });\n\n  const isFormFieldValid = name => !!(formik.touched[name] && formik.errors[name]);\n\n  const getFormErrorMessage = name => {\n    return isFormFieldValid(name) && /*#__PURE__*/_jsxDEV(\"small\", {\n      className: \"p-error\",\n      children: formik.errors[name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 42\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      ref: toast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-d-flex p-jc-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"p-text-center\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: formik.handleSubmit,\n            className: \"p-fluid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"p-float-label\",\n                children: [/*#__PURE__*/_jsxDEV(InputText, {\n                  id: \"username\",\n                  name: \"username\",\n                  value: formik.values.username,\n                  onChange: formik.handleChange,\n                  autoFocus: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"username\",\n                  className: classNames({\n                    'p-error': isFormFieldValid('username')\n                  }),\n                  children: \"Username\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 29\n              }, this), getFormErrorMessage('username')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"p-float-label\",\n                children: [/*#__PURE__*/_jsxDEV(InputText, {\n                  type: \"password\",\n                  id: \"password\",\n                  name: \"password\",\n                  value: formik.values.password,\n                  onChange: formik.handleChange,\n                  autoFocus: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"password\",\n                  className: classNames({\n                    'p-error': isFormFieldValid('password')\n                  }),\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 29\n              }, this), getFormErrorMessage('password')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              label: \"Login\",\n              className: \"p-mt-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Login, \"YdCGtVuIniV38sID2mGDBypGSZA=\", false, function () {\n  return [useFormik];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["P:/Thuc-tap/GreenMovie-V3.0/frontend/admin/src/containers/Login/Login.js"],"names":["React","useState","useRef","classNames","InputText","Button","useFormik","Toast","axios","Login","formData","setFormData","toast","formik","initialValues","username","password","validate","data","errors","onSubmit","resetForm","post","then","res","console","log","route","id","catch","error","status","current","show","severity","summary","detail","life","isFormFieldValid","name","touched","getFormErrorMessage","handleSubmit","values","handleChange"],"mappings":"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","sourcesContent":["import React, { useState,useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { useFormik } from 'formik';\r\nimport './Login.css';\r\nimport { Toast } from 'primereact/toast';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Login() {\r\n    const [formData, setFormData] = useState({});\r\n    const toast = useRef(null);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: '',\r\n            password: '',\r\n        },\r\n        validate: (data) => {\r\n            let errors = {};\r\n\r\n            if (!data.username) {\r\n                errors.username = 'Username không được để trống.';\r\n            }\r\n\r\n            if (!data.password) {\r\n                errors.password = 'Password không được để trống';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            setFormData(data);\r\n            formik.resetForm();\r\n            axios.post('http://localhost:8080/api/auth/signin', data).then((res) => {\r\n                console.log(res.data);\r\n                <Route key={id} exact path={route}></Route>\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.status);\r\n                if(error.status === 401){\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Username hoặc Password không đúng', life: 3000});\r\n                }else{\r\n                    toast.current.show({severity:'error', summary: 'Thông báo', detail:'Lỗi hệ thống đăng nhập lại', life: 3000});\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    const isFormFieldValid = (name) => !!(formik.touched[name] && formik.errors[name]);\r\n    const getFormErrorMessage = (name) => {\r\n        return isFormFieldValid(name) && <small className=\"p-error\">{formik.errors[name]}</small>;\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Toast ref={toast} />\r\n        <div className=\"form\">\r\n            <div className=\"p-d-flex p-jc-center\">\r\n                <div className=\"card\">\r\n                    <h2 className=\"p-text-center\">Login</h2>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\">\r\n                        <div className=\"p-field\">\r\n                            <span className=\"p-float-label\">\r\n                                <InputText id=\"username\" name=\"username\" value={formik.values.username} onChange={formik.handleChange} autoFocus />\r\n                                <label htmlFor=\"username\" className={classNames({ 'p-error': isFormFieldValid('username') })}>Username</label>\r\n                            </span>\r\n                            {getFormErrorMessage('username')}\r\n                        </div>\r\n                        <div className=\"p-field\">\r\n                            <span className=\"p-float-label\">\r\n                                <InputText type=\"password\" id=\"password\" name=\"password\" value={formik.values.password} onChange={formik.handleChange} autoFocus />\r\n                                <label htmlFor=\"password\" className={classNames({ 'p-error': isFormFieldValid('password') })}>Password</label>\r\n                            </span>\r\n                            {getFormErrorMessage('password')}\r\n                        </div>\r\n                        <Button type=\"submit\" label=\"Login\" className=\"p-mt-2\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}