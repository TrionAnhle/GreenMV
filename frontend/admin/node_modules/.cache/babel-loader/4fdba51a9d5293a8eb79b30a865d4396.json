{"ast":null,"code":"var _jsxFileName = \"P:\\\\Thuc-tap\\\\GreenMovie-V3.0\\\\frontend\\\\admin\\\\src\\\\containers\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { useFormik } from 'formik';\nimport './Login.css';\nimport { Toast } from 'primereact/toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  const [formData, setFormData] = useState({});\n  const formik = useFormik({\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validate: data => {\n      let errors = {};\n\n      if (!data.username) {\n        errors.username = 'Username không được để trống.';\n      }\n\n      if (!data.password) {\n        errors.password = 'Password không được để trống';\n      }\n\n      return errors;\n    },\n    onSubmit: data => {\n      setFormData(data);\n      formik.resetForm();\n    }\n  });\n\n  const isFormFieldValid = name => !!(formik.touched[name] && formik.errors[name]);\n\n  const getFormErrorMessage = name => {\n    return isFormFieldValid(name) && /*#__PURE__*/_jsxDEV(\"small\", {\n      className: \"p-error\",\n      children: formik.errors[name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 42\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-d-flex p-jc-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"p-text-center\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: formik.handleSubmit,\n          className: \"p-fluid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"p-float-label\",\n              children: [/*#__PURE__*/_jsxDEV(InputText, {\n                id: \"username\",\n                name: \"username\",\n                value: formik.values.username,\n                onChange: formik.handleChange,\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"username\",\n                className: classNames({\n                  'p-error': isFormFieldValid('username')\n                }),\n                children: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 29\n            }, this), getFormErrorMessage('username')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"p-float-label\",\n              children: [/*#__PURE__*/_jsxDEV(InputText, {\n                type: \"password\",\n                id: \"password\",\n                name: \"password\",\n                value: formik.values.password,\n                onChange: formik.handleChange,\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                className: classNames({\n                  'p-error': isFormFieldValid('password')\n                }),\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), getFormErrorMessage('password')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            label: \"Login\",\n            className: \"p-mt-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Login, \"vTsLUQAcaVHsCBWne/SQwyFA6w4=\", false, function () {\n  return [useFormik];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["P:/Thuc-tap/GreenMovie-V3.0/frontend/admin/src/containers/Login/Login.js"],"names":["React","useState","classNames","InputText","Button","useFormik","Toast","Login","formData","setFormData","formik","initialValues","username","password","validate","data","errors","onSubmit","resetForm","isFormFieldValid","name","touched","getFormErrorMessage","handleSubmit","values","handleChange"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { useFormik } from 'formik';\r\nimport './Login.css';\r\nimport { Toast } from 'primereact/toast';\r\n\r\n\r\nfunction Login() {\r\n    const [formData, setFormData] = useState({});\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: '',\r\n            password: '',\r\n        },\r\n        validate: (data) => {\r\n            let errors = {};\r\n\r\n            if (!data.username) {\r\n                errors.username = 'Username không được để trống.';\r\n            }\r\n\r\n            if (!data.password) {\r\n                errors.password = 'Password không được để trống';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (data) => {\r\n            setFormData(data);\r\n            formik.resetForm();\r\n        }\r\n    });\r\n\r\n    const isFormFieldValid = (name) => !!(formik.touched[name] && formik.errors[name]);\r\n    const getFormErrorMessage = (name) => {\r\n        return isFormFieldValid(name) && <small className=\"p-error\">{formik.errors[name]}</small>;\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <div className=\"p-d-flex p-jc-center\">\r\n                <div className=\"card\">\r\n                    <h2 className=\"p-text-center\">Login</h2>\r\n                    <form onSubmit={formik.handleSubmit} className=\"p-fluid\">\r\n                        <div className=\"p-field\">\r\n                            <span className=\"p-float-label\">\r\n                                <InputText id=\"username\" name=\"username\" value={formik.values.username} onChange={formik.handleChange} autoFocus />\r\n                                <label htmlFor=\"username\" className={classNames({ 'p-error': isFormFieldValid('username') })}>Username</label>\r\n                            </span>\r\n                            {getFormErrorMessage('username')}\r\n                        </div>\r\n                        <div className=\"p-field\">\r\n                            <span className=\"p-float-label\">\r\n                                <InputText type=\"password\" id=\"password\" name=\"password\" value={formik.values.password} onChange={formik.handleChange} autoFocus />\r\n                                <label htmlFor=\"password\" className={classNames({ 'p-error': isFormFieldValid('password') })}>Password</label>\r\n                            </span>\r\n                            {getFormErrorMessage('password')}\r\n                        </div>\r\n                        <Button type=\"submit\" label=\"Login\" className=\"p-mt-2\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}